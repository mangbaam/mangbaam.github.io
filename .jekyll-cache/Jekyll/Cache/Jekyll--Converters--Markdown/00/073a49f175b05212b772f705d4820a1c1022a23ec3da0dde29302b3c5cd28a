I"w<h2 id="til-today-i-learned">TIL (Today I Learned)</h2>
<p>이 책의 저자가 깨끗한 코드에 대해 어떻게 정의하고 있는지 알았다.</p>

<h3 id="오늘-읽은-범위">오늘 읽은 범위</h3>
<p>1장. 깨끗한 코드</p>

<h3 id="책에서-기억하고-싶은-내용을-써보세요">책에서 기억하고 싶은 내용을 써보세요.</h3>
<p><em>실제 내용은 더 길지만 핵심적이라고 생각되는 부분만 요약한 내용입니다.</em></p>
<blockquote>
  <p><strong>비야네 스트롭스트룹(C++ 창시자)</strong></p>

  <p>의존성을 최대한 줄여야 유지 보수가 쉬워진다.
깨끗한 코드는 한 가지를 제대로 한다.</p>
</blockquote>

<blockquote>
  <p><strong>그래디 부치(Object Oriented Analysis and Design with Application 저자)</strong></p>

  <p>깨끗한 코드는 단순하고 직접적이다.</p>
</blockquote>

<blockquote>
  <p><strong>빅 데이브 토마스(OTI 창립자이자 이클립스 전략의 대부)</strong></p>

  <p>깨끗한 코드는 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다.
단위 테스트 케이스와 인수 테스트 케이스가 존재한다.</p>
</blockquote>

<blockquote>
  <p><strong>마이클 페더스 (Working Effectively with Legacy Code 저자)</strong></p>

  <p>깨끗한 코드는 주의 깊게 짰다는 느낌을 준다.</p>
</blockquote>

<blockquote>
  <p><strong>론 제프리스 (Extreme Programming Installed와 Extreme Programming Adventure in C# 저자)</strong></p>

  <p>켄트 벡이 제안한 단순한 코드 규칙으로 구현을 하는데 간단한 코드란 다음과 같다.</p>

  <ul>
    <li>모든 테스트를 통과한다.</li>
    <li>중복이 없다.</li>
    <li>시스템 내 모든 설계 아이디어를 표현한다.</li>
    <li>클래스, 메서드, 함수 등을 최대한 줄인다.</li>
  </ul>

  <p>중복 줄이기, 표현력 높이기, 초반부터 간단한 추상화 고려하기. 이 세 가지가 깨끗한 코드를 만드는 비결이다.</p>
</blockquote>

<blockquote>
  <p><strong>워드 커닝햄 (위키 창시자, 피트 창시자, 익스트림 프로그래밍 공동 창시자 등)</strong></p>

  <p>깨끗한 코드는 코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다.
코드가 그 문제를 풀기 위한 언어처럼 보인다면 아름다운 코드이다.</p>
</blockquote>

<h3 id="오늘-읽은-소감은-떠오르는-생각을-가볍게-적어보세요">오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요</h3>
<p>// 나같은 디자인 전공에게 그림을 그리는 행위에 빗대어 클린코드란 무엇인가를 설명해주는 내용 덕분에 조금 더 쉽게 이해할 수 있었던 챕터였다.</p>

<h3 id="궁금한-내용이-있거나-잘-이해되지-않는-내용이-있다면-적어보세요">궁금한 내용이 있거나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>
<p>// 르블랑의 법칙? (LeBlanc’s Law states) - “Later equals never” is used in the context of software development, but may be applied more broadly to other areas. The law is attributed to Dave LeBlanc.</p>
:ET