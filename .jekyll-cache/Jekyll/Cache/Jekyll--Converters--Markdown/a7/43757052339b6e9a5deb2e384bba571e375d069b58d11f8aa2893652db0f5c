I"x:<p><img src="/assets/images/EffectiveKotlinCover.png" alt="이펙티브 코틀린 북커버" /></p>

<p><a href="https://www.notion.so/mangbaam/Effective-Kotlin-2a5acacaa11d443e8da3a00a75b85450#5c8f10eea5f94f4fa0d9b1086a1c8be5">책 내용 요약 (Notion)</a></p>

<h2 id="til-today-i-learned">TIL (Today I Learned)</h2>
<p>코틀린은 모듈로 프로그램을 설계하는데 모듈은 <u>클래스, 객체, 함수, 타입 별칭, 톱레벨 프로퍼티 등</u> 다양한 요소로 구성된다.
이런 요소 중 일부는 <strong>상태</strong>를 가질 수 있다.
상태는 <code class="language-plaintext highlighter-rouge">var</code>을 사용하거나 <code class="language-plaintext highlighter-rouge">mutable</code>을 사용하는 경우이다.
이번 장에서는 이런 상태를 적절히 관리하는 방법에 대해서 공부했다.</p>

<h3 id="오늘-읽은-범위">오늘 읽은 범위</h3>
<ul>
  <li>1부. 좋은 코드
    <ul>
      <li>1장. 안정성
        <ul>
          <li>아이템1. 가변성을 제한하라</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="책에서-기억하고-싶은-내용을-써보세요">책에서 기억하고 싶은 내용을 써보세요.</h3>

<h4 id="가변성을-제한하는-3가지-방법">가변성을 제한하는 3가지 방법</h4>
<p>코틀린에서 가변성을 제한하는 방법은 크게 다음 3가지가 있다.</p>
<ul>
  <li>읽기 전용 프로퍼티 (<code class="language-plaintext highlighter-rouge">val</code>)</li>
  <li>가변 컬렉션과 읽기 전용 컬렉션 구분하기</li>
  <li>데이터 클래스의 <code class="language-plaintext highlighter-rouge">copy</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">val</code>은 읽기 전용 프로퍼티이지 변경이 불가능하다는 뜻은 아니다. <code class="language-plaintext highlighter-rouge">mutable</code> 객체를 담고 있다면 내부적으로 변할 수 있다.
완전히 변경할 필요가 없다면 <code class="language-plaintext highlighter-rouge">final</code> 프로퍼티를 사용하는 것이 좋다.</p>

<p><code class="language-plaintext highlighter-rouge">mutable</code>이 붙은 인터페이스는 읽기 전용 인터페이스를 상속 받아서 변경을 위한 메서드를 추가한 것이다.</p>

<p>만약 읽기 전용에서 <code class="language-plaintext highlighter-rouge">mutable</code>로 변경해야 한다면 <code class="language-plaintext highlighter-rouge">copy</code>를 통해서 새로운 <code class="language-plaintext highlighter-rouge">mutable</code> 컬렉션을 만드는 <code class="language-plaintext highlighter-rouge">list.toMutableList</code> 등을 활용해야 한다.</p>

<p>코틀린에서 가변성을 제한하기 위해서 <code class="language-plaintext highlighter-rouge">immutable</code>객체를 많이 사용하는데 그 장점은 다음과 같다.</p>
<ul>
  <li>한 번 정의된 상태가 유지되므로 코드 이해가 쉽다</li>
  <li>객체를 공유했을 때 충돌이 발생하지 않으므로 병렬 처리에 안전하다</li>
  <li>객체에 대한 참조가 변경되지 않으므로 쉽게 캐시할 수 있다</li>
  <li>방어적 복사본(defensive copy)을 만들 필요가 없고, 객체를 복사할 때 깊은 복사를 따로 하지 않아도 된다</li>
  <li>다른 객체를 만들 때 활용하기 좋다</li>
  <li><code class="language-plaintext highlighter-rouge">set</code> 또는 <code class="language-plaintext highlighter-rouge">map</code>의 <strong>키</strong>로 사용할 수 있다</li>
</ul>

<p>단점은 객체를 변경할 수 없다는 점이다. <code class="language-plaintext highlighter-rouge">immutable</code> 객체를 변경하기 위해서는 자신의 일부를 수정한 새로운 객체를 만들어 내는 메서드를 가져야 한다.
예를 들어 Int의 <code class="language-plaintext highlighter-rouge">plus</code>나 <code class="language-plaintext highlighter-rouge">minus</code>, <code class="language-plaintext highlighter-rouge">Iterable</code>의 <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">filter</code> 등의 메서드가 있다.</p>

<p>새로운 객체를 만들어 내는 메서드를 하나하나 만드는 것은 비효율적이기에 <code class="language-plaintext highlighter-rouge">data</code> 한정자를 사용한다.
<code class="language-plaintext highlighter-rouge">data</code>한정자는 <code class="language-plaintext highlighter-rouge">copy</code> 메서드를 가진다. <code class="language-plaintext highlighter-rouge">copy</code> 메서드를 사용하면 모든 기본 생성자 프로퍼티가 같은 새로운 객체를 만들어 낼 수 있다.</p>

<hr />
<h4 id="변경-가능-지점">변경 가능 지점</h4>

<p>변경할 수 있는 리스트를 만드는 방법은 다음 2가지가 있다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 컬렉션을 만드는 것</li>
  <li><code class="language-plaintext highlighter-rouge">var</code>로 읽고 쓸 수 있는 프로퍼티를 만드는 것</li>
</ul>

<p>두 방법은 <strong>변경 가능 지점</strong>(mutating point)의 위치가 다르다.</p>

<p>첫 번째 방법은 구체적인 리스트 구현 내부에 변경 가능 지점이 있다.
  멀티스레드 처리가 이루어질 경우, 내부적으로 적절한 동기화가 되어 있는지 확실히 알 수 없어 위험하다.
두 번째 방법은 프로퍼티 자체가 변경 가능 지점이다.
  멀시스레드 처리의 안정성이 더 좋다고 할 수 있다. (하지만 잘못 만들면 일부 요소가 손실될 수 있다)</p>

<blockquote>
  <p>:x: <em>프로퍼티와 컬렉션 모두 변경 가능한 지점으로 만들면 안된다</em></p>
</blockquote>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">list</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">&gt;()</span>
</code></pre></div></div>

<hr />
<h4 id="mutable-객체-사용의-주의점">mutable 객체 사용의 주의점</h4>

<p><code class="language-plaintext highlighter-rouge">mutable</code> 객체를 사용할 때 객체를 외부에 노출하는 것은 굉장히 위험하다.
어떤 클래스에서 private으로 선언된 <code class="language-plaintext highlighter-rouge">mutableList</code>를 그대로 반환한다면 private으로 선언되었음에도 불구하고 외부에서 변경될 수 있다.
이를 방지하기 위해 다음 2 가지 방법이 사용된다.</p>
<ul>
  <li>리턴되는 <code class="language-plaintext highlighter-rouge">mutable</code> 객체를 복제한다. -&gt; <strong>방어적 복제</strong>(defensive copying)라고 한다.
    <ul>
      <li>이때 data 한정자로 만들어지는 copy 메서드를 활용하면 좋다.
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">UserHolder</span> <span class="p">{</span>
  <span class="k">private</span> <span class="kd">val</span> <span class="py">user</span><span class="p">:</span> <span class="nc">MutableUser</span><span class="p">()</span>

  <span class="k">fun</span> <span class="nf">get</span><span class="p">():</span> <span class="nc">MutableUser</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="c1">// ...</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>가변성을 제한한다. 컬렉션은 <strong>읽기 전용 슈퍼타입으로 업캐스트</strong>하여 가변성을 제한한다.
    <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">data class</span> <span class="nc">User</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span>
    
  <span class="kd">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
      <span class="k">private</span> <span class="kd">val</span> <span class="py">storedUser</span><span class="p">:</span> <span class="nc">MutableMap</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableMapOf</span><span class="p">()</span>

      <span class="k">fun</span> <span class="nf">loadAll</span><span class="p">():</span> <span class="nc">Map</span><span class="p">&lt;</span><span class="nc">Int</span><span class="p">,</span> <span class="nc">String</span><span class="p">&gt;</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">storedUsers</span>
      <span class="p">}</span>

      <span class="c1">// ...</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />
<h4 id="정리">정리</h4>
<p>가변 지점을 제한하며 코드를 작성하자. 이때 활용할 수 있는 규칙들은 다음과 같다.</p>
<ul>
  <li>var보다는 val 사용</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 프로퍼티보다는 <code class="language-plaintext highlighter-rouge">immutable</code> 프로퍼티 사용</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 객체와 클래스보다는 <code class="language-plaintext highlighter-rouge">immutable</code> 객체과 클래스 사용</li>
  <li>변경이 필요한 대상을 만들 경우 <code class="language-plaintext highlighter-rouge">immutable</code> 데이터 클래스로 만들고 copy 활용</li>
  <li>컬렉션에 상태를 저장할 때 <code class="language-plaintext highlighter-rouge">mutable</code> 컬렉션 보다는 읽기 전용 컬렉션 사용</li>
  <li>변이 지점을 적절하게 설계, 불필요한 변이 지점은 만들지 않는다</li>
  <li><code class="language-plaintext highlighter-rouge">mutable</code> 객체를 외부에 노출하지 않는다</li>
</ul>

<p>단, 가끔 효율성 때문에 <code class="language-plaintext highlighter-rouge">immutable</code>객체보다 <code class="language-plaintext highlighter-rouge">mutable</code> 객체를 사용하는 것이 더 좋을 때가 있다</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">immutable</code> 객체를 사용할 때 멀티스레드를 사용할 때 많은 주의를 기울여야 한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">immutable</code> 객체와 <code class="language-plaintext highlighter-rouge">mutable</code> 객체를 구분하는 기준은 가변성이다.</p>
  </li>
</ul>

<h3 id="오늘-읽은-소감은-떠오르는-생각을-가볍게-적어보세요">오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요</h3>
<p>기존에 <code class="language-plaintext highlighter-rouge">val</code>, <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">mutable</code>, <code class="language-plaintext highlighter-rouge">immutable</code> 을 잘 사용하고 있었지만 이 파트를 읽고 나서 더욱 적절한 때에 적절한 방법을 사용해야겠다는 생각이 들었다. kotlin이 java의 단점을 보안하기 위해 탄생한 언어라는 것을 잘 보여주는 파트였다. java 대신 kotlin을 사용하는 가장 큰 이유는 안정성 때문이라고 생각한다. 또한 코틀린이 안정성을 신경써서 설계되었지만 개발자가 잘 알지 못하고 무분별하게 사용한다면 불안정한 설계를 할 수 있다는 사실도 알게 되었다.</p>

<h3 id="궁금한-내용이-있거나-잘-이해되지-않는-내용이-있다면-적어보세요">궁금한 내용이 있거나, 잘 이해되지 않는 내용이 있다면 적어보세요.</h3>
<h4 id="방어적-복사">방어적 복사</h4>
<p><a href="#mutable-%EA%B0%9D%EC%B2%B4-%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90">위 내용</a>에서 등장한 <em>방어적 복사</em>란 용어가 생소했다.</p>

<p>아쉽게도 Kotlin 공식 문서에서 Defensive copying에 대한 정의를 내리고 있지 않았다.
일부 블로그를 찾아보니 방어적 복사를 다음과 같이 정의 했다.</p>
<blockquote>
  <p>MutableCollection을 인자로 받는 함수에 전달할 때에는 원본의 변경을 막기 위해 컬렉션을 복사한다. 이를 <strong>방어적 복사(defensive copy) 패턴</strong>이라고 한다.</p>
</blockquote>

<h4 id="얕은-복사-vs-깊은-복사">얕은 복사 vs 깊은 복사</h4>
<p><code class="language-plaintext highlighter-rouge">immutable</code> 객체를 사용하는 장점 중 깊은 복사를 일부러 하지 않아도 된다는 부분이 있었다.</p>

<blockquote>
  <p><strong>깊은 복사</strong></p>

  <ul>
    <li>데이터 자체를 통째로 복사</li>
    <li>복사된 두 객체는 완전히 독립적인 메모리를 가진다</li>
    <li>value type 객체들은 깊은 복사를 한다</li>
    <li>data class에서 <code class="language-plaintext highlighter-rouge">copy</code>를 사용하면 깊은 복사가 된다</li>
  </ul>
</blockquote>

<blockquote>
  <p><strong>얕은 복사</strong></p>

  <ul>
    <li>인스턴스가 메모리에 새로 생성되지 않는다</li>
    <li>주소값을 복사하는 것이다</li>
    <li>reference type 객체를 복사하면 주소값이 복사되는 얕은 복사를 한다</li>
  </ul>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">immutable</code> 객체는 공유했을 때 충돌이 발생하지 않으므로 병렬 처리를 안전하게 할 수 있다.</p>

<p>책에 “immutable 객체는 공유했을 때 충돌이 발생하지 않으므로 병렬 처리를 안전하게 할 수 있다” 라는 설명을 보고 왜 멀티스레드 얘기를 했는지 알 것 같아요
책 예제에서 값을 추가하는 경우를 설명해서 좀 헷갈렸는데,,</p>

<p>mutable 객체의 경우 내부에서만 변화가 있으니까 thread에서 같은 부분에 접근할 수도 있고, 동기화가 되었는지 확실히 알기 어렵다고 표현한 것 같고,</p>

<p>var로 선언한 경우엔 매번 할당되는 객체가 달라지는 거라서 같은 부분에 접근한다는 것 자체가 있을 수 없는 일이 되겠네요. 일부 요소가 손실될 수도 있지만 최소한 충돌은 발생하지 않아서 멀티스레드 안정성이 더 좋다고 이해했습니다.</p>

:ET