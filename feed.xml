<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://mangbaam.github.io//jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mangbaam.github.io//jekyll-theme-yat/" rel="alternate" type="text/html" hreflang="ko" /><updated>2023-08-14T19:52:55+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/feed.xml</id><title type="html">맹뱀 블로그</title><subtitle>안드로이드 개발자가 되기 위한 기록들</subtitle><author><name>mangbaam</name></author><entry><title type="html">안드로이드 태극기 커스텀 뷰</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2023/08/15/taegeukgi.html" rel="alternate" type="text/html" title="안드로이드 태극기 커스텀 뷰" /><published>2023-08-15T00:00:00+00:00</published><updated>2023-08-15T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2023/08/15/taegeukgi</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2023/08/15/taegeukgi.html"><![CDATA[<p>2023년 8월 15일은 제 78주년 광복절이다.</p>

<p>광복절을 맞아 태극기를 안드로이드 커스텀뷰로 작성해보았다.</p>

<p>덤으로 한글을 사용한 코딩을 해보았다.</p>

<p><img src="https://i.imgur.com/HB0dgwA.png" alt="" /></p>

<h2 id="태극기">태극기</h2>

<p>태극기는 대한민국의 국기이며 가운데 태극문양과 네모서리의 건곤감리 4괘로 구성된다.</p>

<p>각각의 의미는 다음을 읽어보면 좋을 것 같다.</p>

<p><a href="https://www.mois.go.kr/chd/sub/a05/birth/screen.do"><img src="https://i.imgur.com/k3gUnYV.png" alt="" /></a></p>

<h2 id="태극기-도안">태극기 도안</h2>

<p><img src="https://i.imgur.com/jAZ6Hla.png" alt="" /></p>

<p>태극기 도안은 <a href="https://www.mois.go.kr/chd/sub/a05/birth/screen.do">행정안전부 사이트</a>에 공개되어 있다.</p>

<p>참고로 사이트 언어를 영어로 변경하면 조금 더 자세한 가이드가 나와있다.</p>

<p><img src="https://i.imgur.com/kcJ94ni.png" alt="" /></p>

<h2 id="태극기-그리기">태극기 그리기</h2>

<h3 id="뷰-클래스-만들기">뷰 클래스 만들기</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="err">태극기(  
    context: </span><span class="nc">Context</span><span class="p">,</span>  
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>클래스 이름을 한글로 <code class="language-plaintext highlighter-rouge">태극기</code>로 지었다.</p>

<h3 id="색상-정의">색상 정의</h3>

<p><a href="https://www.mois.go.kr/frt/sub/a06/b08/nationalIcon_2_2/screen.do"><img src="https://i.imgur.com/jlKVySm.png" alt="" /></a>
<a href="https://www.mois.go.kr/frt/sub/a06/b08/nationalIcon_2_2/screen.do">행정안전부 사이트</a>에 태극기에서 사용되는 색상이 정의되어 있지만 CIE나 MUNSELL 색표기 방식이 생소하고, 자료도 많이 나오지 않았다. 그래서 시스템 컬러 피커를 사용하여 색을 추출했다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="err">태극기(  
    context: </span><span class="nc">Context</span><span class="p">,</span>  
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// ...</span>

	<span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
		<span class="k">const</span> <span class="kd">val</span> <span class="err">하양</span> <span class="err">=</span> <span class="py">Color</span><span class="p">.</span><span class="nc">WHITE</span>  
		<span class="kd">val</span> <span class="err">검정</span> <span class="err">=</span> <span class="py">Color</span><span class="p">.</span><span class="nf">parseColor</span><span class="p">(</span><span class="s">"#0D0D0D"</span><span class="p">)</span>  
		<span class="kd">val</span> <span class="err">파랑</span> <span class="err">=</span> <span class="py">Color</span><span class="p">.</span><span class="nf">parseColor</span><span class="p">(</span><span class="s">"#134A9D"</span><span class="p">)</span>  
		<span class="kd">val</span> <span class="err">빨강</span> <span class="err">=</span> <span class="py">Color</span><span class="p">.</span><span class="nf">parseColor</span><span class="p">(</span><span class="s">"#D0303C"</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="비율-고정하기">비율 고정하기</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="err">태극기(  
    context: </span><span class="nc">Context</span><span class="p">,</span>  
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>  

    <span class="k">private</span> <span class="kd">var</span> <span class="err">너비</span> <span class="err">=</span> <span class="err">0</span>  
    <span class="py">private</span> <span class="kd">var</span> <span class="err">높이</span> <span class="err">=</span> <span class="err">0</span>  

    <span class="py">override</span> <span class="k">fun</span> <span class="nf">onMeasure</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">heightMeasureSpec</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">너비</span> <span class="p">=</span> <span class="nc">MeasureSpec</span><span class="p">.</span><span class="nf">getSize</span><span class="p">(</span><span class="n">widthMeasureSpec</span><span class="p">)</span>  
        <span class="err">높이</span> <span class="p">=</span> <span class="p">(</span><span class="err">너비</span> <span class="p">*</span> <span class="mf">2F</span> <span class="p">/</span> <span class="mi">3</span><span class="p">).</span><span class="nf">toInt</span><span class="p">()</span>  
        <span class="nf">setMeasuredDimension</span><span class="p">(</span><span class="err">너비</span><span class="p">,</span> <span class="err">높이</span><span class="p">)</span>  
    <span class="p">}</span>  
  
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>  
        <span class="c1">// 색상 정의</span>
    <span class="p">}</span>  
<span class="p">}</span>  
</code></pre></div></div>

<p>태극기의 비율은 가로:세로=3:2 비율을 가지기 때문에 고정적인 비율을 위해 <code class="language-plaintext highlighter-rouge">setMeasuredDimension</code>을 사용해 정의해주었다.</p>

<p>그리고 이때 뷰의 너비와 높이 값을 설정해준다.</p>

<h3 id="타입-별명-지정">타입 별명 지정</h3>

<p>한글을 사용한 코딩을 하면서 Paint와 같은 타입도 한글로 작성해주고 싶었다. (하지만 모든 것을 다 한글로 바꾸면 가독성이 너무 안 좋아 질 것 같아서 Paint 정도만 한글로 바꿔주었다)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typealias</span> <span class="err">물감</span> <span class="p">=</span> <span class="nc">Paint</span>
</code></pre></div></div>

<p>참고로 typealias 는 우리의 태극기 뷰가 아닌 최상단에 정의되어야 한다.</p>

<h3 id="태극문양-그리기">태극문양 그리기</h3>

<h4 id="길이-각도-계산">길이, 각도 계산</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="err">태극기(  
    context: </span><span class="nc">Context</span><span class="p">,</span>  
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="err">태극문양물감</span> <span class="err">=</span> <span class="err">물감()</span>  
  
    <span class="py">private</span> <span class="kd">val</span> <span class="err">태극문양회전각도</span> <span class="err">=</span> <span class="py">Math</span><span class="p">.</span><span class="nf">toDegrees</span><span class="p">(</span><span class="nf">atan</span><span class="p">(</span><span class="mf">2.0</span> <span class="p">/</span> <span class="mi">3</span><span class="p">)).</span><span class="nf">toFloat</span><span class="p">()</span>  
    <span class="k">private</span> <span class="kd">var</span> <span class="err">너비</span> <span class="err">=</span> <span class="err">0</span>  
    <span class="py">private</span> <span class="kd">var</span> <span class="err">높이</span> <span class="err">=</span> <span class="err">0</span>  
    <span class="py">private</span> <span class="kd">val</span> <span class="err">태극문양영역:</span> <span class="py">RectF</span>  
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="nc">RectF</span><span class="p">(</span>  
            <span class="err">태극반지름</span> <span class="p">*</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">높이</span> <span class="p">/</span> <span class="mi">2</span> <span class="p">-</span> <span class="err">태극반지름</span><span class="p">,</span>  
            <span class="err">태극반지름</span> <span class="p">*</span> <span class="mi">4</span><span class="p">,</span>  
            <span class="err">높이</span> <span class="p">/</span> <span class="mi">2</span> <span class="p">+</span> <span class="err">태극반지름</span><span class="p">,</span>  
        <span class="p">)</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="err">태극반지름:</span> <span class="py">Float</span>  
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">너비</span> <span class="p">/</span> <span class="mf">6F</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="err">가로중앙</span>  
        <span class="py">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">너비</span> <span class="p">/</span> <span class="mf">2F</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="err">세로중앙</span>  
        <span class="py">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">높이</span> <span class="p">/</span> <span class="mf">2F</span>  

	<span class="c1">// ...</span>
<span class="p">}</span>  
  
<span class="k">typealias</span> <span class="err">물감</span> <span class="p">=</span> <span class="nc">Paint</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">너비</code>와 <code class="language-plaintext highlighter-rouge">높이</code>는 onMeasure에서 정의되었고, <code class="language-plaintext highlighter-rouge">태극반지름</code>, <code class="language-plaintext highlighter-rouge">가로중앙</code>, <code class="language-plaintext highlighter-rouge">세로중앙</code>은 태극기 도안을 보면 쉽게 구할 수 있다. (단, <code class="language-plaintext highlighter-rouge">너비</code>와 <code class="language-plaintext highlighter-rouge">높이</code>의 초기 값이 0이므로 <code class="language-plaintext highlighter-rouge">get()</code>을 사용하여 최신의 값을 계산해야한다.)</p>

<p><code class="language-plaintext highlighter-rouge">태극문양영역</code>은 다음 영역을 의미한다</p>

<p><img src="https://i.imgur.com/L4IZOO2.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">태극문양회전각도</code>는 다음의 각도를 의미한다</p>

<p><img src="https://i.imgur.com/AM9wtsz.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">태극문양회전각도</code>는 위 사진과 같이 직각삼각형을 만들어 <em>tan</em>(탄젠트)를 이용하면 구할 수 있다.</p>

<p>큰 직각삼각형을 보면 밑변이 태극기 가로길이의 반을 차지하고, 높이가 태극기 세로길이의 반을 차지하기 때문에 2:3의 비율을 가지며, 탄젠트 공식에 의해 <em>tan(⍬) = ⅔</em> 이 된다. 결국 ⍬를 구하기 위해서 <em>atan</em>(아크탄젠트)를 사용할 수 있으며, <code class="language-plaintext highlighter-rouge">atan</code>은 코틀린에서 기본으로 제공되고 있기에 쉽게 구할 수 있다.</p>

<p>단, 제대로 각도를 구하기 위해서는 Degrees 표기법으로 변환해주어야 하며, 이것도 <code class="language-plaintext highlighter-rouge">Math.toDegrees</code>를 통해 제공된다.</p>

<p><code class="language-plaintext highlighter-rouge">private val 태극문양회전각도 = Math.toDegrees(atan(2.0 / 3)).toFloat()</code></p>

<h4 id="반원-그리기">반원 그리기</h4>

<p><img src="https://i.imgur.com/xnBSSvc.png" alt="" /></p>

<p>drawArc 를 통해 빨간 반원과, 파란 반원을 그릴 것이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="err">태극기(  
    context: </span><span class="nc">Context</span><span class="p">,</span>  
    <span class="n">attrs</span><span class="p">:</span> <span class="nc">AttributeSet</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span>  

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">:</span> <span class="nc">Canvas</span><span class="p">)</span> <span class="p">{</span>  
        <span class="k">super</span><span class="p">.</span><span class="nf">onDraw</span><span class="p">(</span><span class="n">canvas</span><span class="p">)</span>  
        <span class="n">canvas</span><span class="p">.</span><span class="nf">drawColor</span><span class="p">(</span><span class="err">하양</span><span class="p">)</span>  
  
        <span class="c1">// 태극 문양  </span>
        <span class="err">태극문양물감</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>  
            <span class="n">color</span> <span class="p">=</span> <span class="err">빨강</span>  
            <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="mi">180</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  
  
            <span class="n">color</span> <span class="p">=</span> <span class="err">파랑</span>  
            <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
        <span class="p">}</span>  
    <span class="p">}</span>  

	<span class="c1">// ...</span>
<span class="p">}</span>  
</code></pre></div></div>

<p><img src="https://i.imgur.com/BEoHenY.png" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">drawArc</code> 에서 시작 각도는 위 그림과 같다.</p>

<p>그래서 빨간 반원을 그릴 때는 <code class="language-plaintext highlighter-rouge">180 + 태극문양회전각도</code>를 한 것이다.</p>

<h4 id="내부에-작은-원-빨강">내부에 작은 원 (빨강)</h4>

<p><img src="https://i.imgur.com/0vqVEPv.png" alt="" /></p>

<p>위와 같은 그림을 그리기 위해서는 각각 <em>cos</em>과 <em>sin</em>을 사용하여 x, y 좌표를 구하고, 위치를 보정하여 작은 원을 그려줘야 한다.</p>

<p>색상을 바꿔서 보여주면 다음과 같다.</p>

<p><img src="https://i.imgur.com/6xBDLc8.png" alt="" /></p>

<p>(수학시간이 아니니 더 자세한 수학적 설명은 하지 않겠다)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 태극 문양  </span>
<span class="err">태극문양물감</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>  
    <span class="n">color</span> <span class="p">=</span> <span class="err">빨강</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="mi">180</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  
  
    <span class="n">color</span> <span class="p">=</span> <span class="err">파랑</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  
  
    <span class="n">color</span> <span class="p">=</span> <span class="err">빨강</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span>  
        <span class="err">가로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">cos</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span> <span class="p">+</span> <span class="mf">180.0</span><span class="p">)).</span><span class="nf">toFloat</span><span class="p">(),</span>  
        <span class="err">세로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">sin</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span> <span class="p">+</span> <span class="mf">180.0</span><span class="p">)).</span><span class="nf">toFloat</span><span class="p">(),</span>  
        <span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
        <span class="k">this</span><span class="p">,</span>  
    <span class="p">)</span>
</code></pre></div></div>

<h4 id="내부에-작은-원-파랑">내부에 작은 원 (파랑)</h4>

<p>비슷한 방식으로 파란 원도 그려준다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 태극 문양  </span>
<span class="err">태극문양물감</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>  
    <span class="n">color</span> <span class="p">=</span> <span class="err">빨강</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="mi">180</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  
  
    <span class="n">color</span> <span class="p">=</span> <span class="err">파랑</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawArc</span><span class="p">(</span><span class="err">태극문양영역</span><span class="p">,</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="mf">180F</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>  
  
    <span class="n">color</span> <span class="p">=</span> <span class="err">빨강</span>  
    <span class="n">canvas</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span>  
        <span class="err">가로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">cos</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span> <span class="p">+</span> <span class="mf">180.0</span><span class="p">)).</span><span class="nf">toFloat</span><span class="p">(),</span>  
        <span class="err">세로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">sin</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span> <span class="p">+</span> <span class="mf">180.0</span><span class="p">)).</span><span class="nf">toFloat</span><span class="p">(),</span>  
        <span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
        <span class="k">this</span><span class="p">,</span>  
    <span class="p">)</span>

	<span class="n">color</span> <span class="p">=</span> <span class="err">파랑</span>  
	<span class="n">canvas</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span>  
	    <span class="err">가로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">cos</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span><span class="p">.</span><span class="nf">toDouble</span><span class="p">())).</span><span class="nf">toFloat</span><span class="p">(),</span>  
	    <span class="err">세로중앙</span> <span class="p">+</span> <span class="p">(</span><span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">*</span> <span class="nf">sin</span><span class="p">(</span><span class="nc">Math</span><span class="p">.</span><span class="nf">toRadians</span><span class="p">(</span><span class="err">태극문양회전각도</span><span class="p">.</span><span class="nf">toDouble</span><span class="p">())).</span><span class="nf">toFloat</span><span class="p">(),</span>  
	    <span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
	    <span class="k">this</span><span class="p">,</span>  
	<span class="p">)</span>
</code></pre></div></div>

<p>그럼 다음과 같이 태극 문양을 완성할 수 있다.</p>

<p><img src="https://i.imgur.com/1vvKykt.png" alt="" /></p>

<p>다른 색으로 표현하면 다음과 같은 모습이다</p>

<p><img src="https://i.imgur.com/P2WGRtp.png" alt="" /></p>

<h3 id="괘-그리기">괘 그리기</h3>

<h4 id="괘-속성">괘 속성</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kd">val</span> <span class="err">괘</span><span class="py">_</span><span class="err">물감</span> <span class="p">=</span> <span class="err">물감</span><span class="p">().</span><span class="nf">apply</span> <span class="p">{</span>  
    <span class="n">color</span> <span class="p">=</span> <span class="err">검정</span>  
    <span class="n">style</span> <span class="p">=</span> <span class="nc">Paint</span><span class="p">.</span><span class="nc">Style</span><span class="p">.</span><span class="nc">FILL</span>  
<span class="p">}</span>

<span class="k">private</span> <span class="kd">val</span> <span class="err">괘</span><span class="py">_</span><span class="err">높이</span>  
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">6</span>  
<span class="k">private</span> <span class="kd">val</span> <span class="err">괘</span><span class="py">_</span><span class="err">간격</span>  
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">태극반지름</span> <span class="p">/</span> <span class="mi">12</span>  
<span class="k">private</span> <span class="kd">val</span> <span class="err">괘</span><span class="py">_</span><span class="err">너비</span>  
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">태극반지름</span>  
<span class="k">private</span> <span class="kd">val</span> <span class="err">괘</span><span class="py">_</span><span class="err">중앙으로부터</span><span class="n">_</span><span class="err">거리</span>  
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="err">높이</span> <span class="p">*</span> <span class="p">(</span><span class="mf">3F</span> <span class="p">/</span> <span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<p>괘 속성 역시 태극기 도안에서 쉽게 수치를 알 수 있다.</p>

<h4 id="괘-그리는-과정">괘 그리는 과정</h4>

<p>괘를 그릴 때는 각도를 사용하여 위치와 크기를 계산하고 그리는 것이 불가능은 아니지만 상당히 까다로운 작업이다.</p>

<p>하지만 다행히도 조금 더 편한 방법이 있다.</p>

<p>바로 캔버스를 조금 돌려서 그린 후 다시 되돌리는 방법이다.</p>

<p>이는 <code class="language-plaintext highlighter-rouge">canvas.store()</code> 를 통해 현재 캔버스 상태를 저장한 후 <code class="language-plaintext highlighter-rouge">canvas.rotate()</code>로 회전하여 그리기 작업을 완료한 후 <code class="language-plaintext highlighter-rouge">canvas.restore()</code> 를 통해 <code class="language-plaintext highlighter-rouge">store()</code>로 저장한 상태로 복구할 수 있다. 즉, 다시 원래대로 회전시킬 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">canvas</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>  
    <span class="nf">save</span><span class="p">()</span>    
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">90</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="c1">// 건괘 그리기 </span>
    <span class="nf">restore</span><span class="p">()</span>  
    
    <span class="nf">save</span><span class="p">()</span>    
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">270</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="c1">// 곤괘 그리기  </span>
    <span class="nf">restore</span><span class="p">()</span>  
    
    <span class="nf">save</span><span class="p">()</span>    
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">270</span> <span class="p">-</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="c1">// 감괘 그리기    </span>
    <span class="nf">restore</span><span class="p">()</span>  
    
    <span class="nf">save</span><span class="p">()</span>    
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">90</span> <span class="p">-</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="c1">// 이괘 그리기   </span>
    <span class="nf">restore</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같은 방식으로 그릴 것이다.</p>

<p>건곤감리는 규칙성이 있어서 함수로 뺄 수 있을 것 같다.</p>

<ul>
  <li>건곤감리의 두께는 태극문양 지름의 1/12 로 모두 동일하다</li>
  <li>건곤감리의 너비는 긴 것은 태극문양 지름의 ½, 짧은 것은 태극문양 지름의 ½ - 1/24 로 일정하다</li>
  <li>각 괘는 3개의 막대기로 이루어져 있다</li>
  <li>3개의 막대기는 동일한 간격을 가진다</li>
  <li>건곤감리는 태극문양 지름의 ¼ 만큼 떨어진 곳부터 그려진다</li>
</ul>

<p>위와 같은 규칙을 기반으로 다음의 함수를 작성해보았다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">fun</span> <span class="err">괘</span><span class="nf">_</span><span class="err">그리기</span><span class="p">(</span><span class="err">캔버스</span><span class="p">:</span> <span class="nc">Canvas</span><span class="p">,</span> <span class="err">순번</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="err">작은괘</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="err">높이</span> <span class="err">=</span> <span class="err">괘</span><span class="py">_</span><span class="err">중앙으로부터</span><span class="n">_</span><span class="err">거리</span> <span class="p">+</span> <span class="err">순번</span> <span class="p">*</span> <span class="err">괘</span><span class="n">_</span><span class="err">간격</span> <span class="p">+</span> <span class="p">(</span><span class="err">순번</span> <span class="p">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">*</span> <span class="err">괘</span><span class="n">_</span><span class="err">높이</span>  
  
    <span class="k">if</span> <span class="p">(</span><span class="err">작은괘</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">캔버스</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span>  
            <span class="err">가로중앙</span> <span class="p">-</span> <span class="err">괘</span><span class="n">_</span><span class="err">너비</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">높이</span><span class="p">,</span>  
            <span class="err">가로중앙</span> <span class="p">-</span> <span class="err">괘</span><span class="n">_</span><span class="err">간격</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span><span class="p">,</span>  
            <span class="err">괘</span><span class="n">_</span><span class="err">물감</span><span class="p">,</span>  
        <span class="p">)</span>  
        <span class="err">캔버스</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span>  
            <span class="err">가로중앙</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">간격</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">높이</span><span class="p">,</span>  
            <span class="err">가로중앙</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">너비</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span><span class="p">,</span>  
            <span class="err">괘</span><span class="n">_</span><span class="err">물감</span><span class="p">,</span>  
        <span class="p">)</span>  
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  
        <span class="err">캔버스</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span>  
            <span class="err">가로중앙</span> <span class="p">-</span> <span class="err">괘</span><span class="n">_</span><span class="err">너비</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">높이</span><span class="p">,</span>  
            <span class="err">가로중앙</span> <span class="p">+</span> <span class="err">괘</span><span class="n">_</span><span class="err">너비</span> <span class="p">/</span> <span class="mi">2</span><span class="p">,</span>  
            <span class="err">세로중앙</span> <span class="p">+</span> <span class="err">높이</span><span class="p">,</span>  
            <span class="err">괘</span><span class="n">_</span><span class="err">물감</span><span class="p">,</span>  
        <span class="p">)</span>  
    <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">순번</code>은 태극문양과 가까운 순서대로 0, 1, 2 가 입력될 것이다.</p>

<p><code class="language-plaintext highlighter-rouge">높이</code>는 태극문양과 가장 가까운 막대기가 그려지기 시작하는 위치이며, 태극기뷰의 <code class="language-plaintext highlighter-rouge">높이</code> 프로퍼티와는 다른 값이다.</p>

<p><code class="language-plaintext highlighter-rouge">작은괘</code>가 <code class="language-plaintext highlighter-rouge">true</code>라면 2개의 작은 막대기를 그리고, <code class="language-plaintext highlighter-rouge">false</code>라면 1개의 긴 막대기를 그린다.</p>

<p>이 함수를 적용하면 다음과 같이 작성할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">canvas</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>  
    <span class="nf">save</span><span class="p">()</span>  
    <span class="c1">// 건괘  </span>
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">90</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="nf">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">괘</span><span class="n">_</span><span class="err">그리기</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">it</span><span class="p">)</span>  
    <span class="p">}</span>  
    <span class="nf">restore</span><span class="p">()</span>  
  
    <span class="c1">// 곤괘  </span>
    <span class="nf">save</span><span class="p">()</span>  
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">270</span> <span class="p">+</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="nf">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">괘</span><span class="n">_</span><span class="err">그리기</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">it</span><span class="p">,</span> <span class="k">true</span><span class="p">)</span>  
    <span class="p">}</span>  
    <span class="nf">restore</span><span class="p">()</span>  
  
    <span class="c1">// 감괘  </span>
    <span class="nf">save</span><span class="p">()</span>  
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">270</span> <span class="p">-</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="nf">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">괘</span><span class="n">_</span><span class="err">그리기</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">it</span><span class="p">,</span> <span class="n">it</span> <span class="p">!=</span> <span class="mi">1</span><span class="p">)</span>  
    <span class="p">}</span>  
    <span class="nf">restore</span><span class="p">()</span>  
  
    <span class="c1">// 이괘  </span>
    <span class="nf">save</span><span class="p">()</span>  
    <span class="nf">rotate</span><span class="p">(</span><span class="mi">90</span> <span class="p">-</span> <span class="err">태극문양회전각도</span><span class="p">,</span> <span class="err">가로중앙</span><span class="p">,</span> <span class="err">세로중앙</span><span class="p">)</span>  
    <span class="nf">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>  
        <span class="err">괘</span><span class="n">_</span><span class="err">그리기</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">it</span><span class="p">,</span> <span class="n">it</span> <span class="p">==</span> <span class="mi">1</span><span class="p">)</span>  
    <span class="p">}</span>  
    <span class="nf">restore</span><span class="p">()</span>  
<span class="p">}</span>
</code></pre></div></div>

<h3 id="완성">완성</h3>

<p><img src="https://i.imgur.com/CYVFqkn.png" alt="" /></p>

<p>이렇게 건곤감리까지 그리면 멋진 태극기가 그려진다.</p>

<h2 id="느낀-점">느낀 점</h2>

<h3 id="태극기-커스텀-뷰">태극기 커스텀 뷰</h3>

<p>우선 태극기를 이렇게 면밀히 살펴본 것은 거의 처음인 것 같다. 그리고 태극기가 굉장히 조화롭다고 느껴졌다.</p>

<p>구현 난이도는 생각보다 높았다. 오랜만에 삼각함수를 살펴보기도 했고, 각도에 대한 이해가 있어야 그릴 수 있었던 것 같다.</p>

<h3 id="한글-코딩">한글 코딩</h3>

<p>파이썬이나 테스트코드의 이름에서는 종종 한글로 된 변수명이나 함수명을 사용하기도 했지만, 이렇게 사용한 것은 처음이다.</p>

<p>그래서 앞으로 한글 코딩을 종종 할 것인가? - 그렇지 않을 것 같다.</p>

<ul>
  <li>안드로이드 스튜디오에서 한글을 잘 지원하지 않는다. rename 중에 이상한 곳으로 이동한다거나 자동완성이 미흡하다.</li>
  <li>경고가 많이 뜬다. Ascii 코드를 사용하라는 경고와 파스칼케이스 등의 컨벤션을 지키지 않았다는 경고가 계속해서 뜬다. (개인적으로 이런 경고는 참지 못한다…)</li>
  <li>가독성이 생각보다 좋지 않다. (익숙함의 차이일수도 있겠다)</li>
  <li>리소스 명으로는 아예 한글이 불가능하다.</li>
</ul>

<p>하지만 재밌는 경험이었다.</p>

<h2 id="전체-코드">전체 코드</h2>

<p><a href="https://github.com/mangbaam/CustomView/blob/main/%ED%83%9C%EA%B7%B9%EA%B8%B0/src/main/java/com/mangbaam/taegeukgi/%ED%83%9C%EA%B7%B9%EA%B8%B0.kt">Github</a>에서 볼 수 있습니다~!</p>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="customview" /><summary type="html"><![CDATA[2023년 8월 15일은 제 78주년 광복절이다.]]></summary></entry><entry><title type="html">Kotlin subList vs slice</title><link href="https://mangbaam.github.io//jekyll-theme-yat/kotlin/2023/06/30/kotlin-sublist-slice.html" rel="alternate" type="text/html" title="Kotlin subList vs slice" /><published>2023-06-30T00:00:00+00:00</published><updated>2023-06-30T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/kotlin/2023/06/30/kotlin-sublist-slice</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/kotlin/2023/06/30/kotlin-sublist-slice.html"><![CDATA[<h2 id="sublist">subList</h2>

<p><code class="language-plaintext highlighter-rouge">kotlin.collections.List</code> 에 정의된 함수이다.</p>

<blockquote>
  <p>Returns a view of the portion of this list between the specified <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/sub-list.html#kotlin.collections.List$subList(kotlin.Int,%20kotlin.Int)/fromIndex">fromIndex</a> (inclusive) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/sub-list.html#kotlin.collections.List$subList(kotlin.Int,%20kotlin.Int)/toIndex">toIndex</a> (exclusive). The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.</p>

  <p>Structural changes in the base list make the behavior of the view undefined.</p>
</blockquote>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>리스트의 fromIndex부터 toIndex 이전까지의 뷰 일부를 반환한다.
반환된 리스트는 원래 리스트를 투영하기 때문에 반환된 리스트의 비구조적 변경은 원래 리스트에 반영되고, 원래 리스트의 비구조적 변경도 마찬가지로 반환된 리스트에 반영된다.

원래 리스트의 구조적 변경은 반환된 뷰가 제대로 동작하지 않도록 만들 수 있다.
</code></pre></div></div>

<h2 id="slice">slice</h2>

<p><code class="language-plaintext highlighter-rouge">kotlin.collections</code>에 정의된 함수이다.</p>

<p><code class="language-plaintext highlighter-rouge">kotlin.collections.collections</code>에도 정의되어 있다.</p>

<blockquote>
  <p>Returns a list containing elements at indices in the specified indices range.</p>
</blockquote>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>리스트에서 주어진 범위(indices)만큼을 포함하는 리스트를 반환한다.
</code></pre></div></div>

<h2 id="공통점">공통점</h2>

<p>subList와 slice 모두 리스트의 일부를 가져오기 위해 사용한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">origin</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">subList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">sliceList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subList: $subList"</span><span class="p">)</span> <span class="c1">// subList: [2, 3]</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceList: $sliceList"</span><span class="p">)</span> <span class="c1">// sliceList: [2, 3]</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://i.imgur.com/3hqJMOC.png" alt="" /></p>

<h2 id="차이점">차이점</h2>

<h3 id="case1-원래-정수리스트-수정">case1: 원래 (정수)리스트 수정</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">origin</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">subList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">sliceList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subList: $subList"</span><span class="p">)</span> <span class="c1">// subList: [2, 3]</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceList: $sliceList"</span><span class="p">)</span> <span class="c1">// sliceList: [2, 3]</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"\n----- origin[1] = 200 -----\n"</span><span class="p">)</span>
    <span class="n">origin</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">200</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subList: $subList"</span><span class="p">)</span> <span class="c1">// subList: [200, 3]</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceList: $sliceList"</span><span class="p">)</span> <span class="c1">// sliceList: [2, 3]</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://i.imgur.com/5SEEbDp.png" alt="" /></p>

<p>원래 리스트의 1번 인덱스 값을 2 → 200 으로 변경했더니, <code class="language-plaintext highlighter-rouge">subList</code>는 변경이 반영되었고, <code class="language-plaintext highlighter-rouge">slice</code>는 반영되지 않았다.</p>

<h3 id="case2-원래-객체리스트-수정">case2: 원래 (객체)리스트 수정</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">data class</span> <span class="nc">Item</span><span class="p">(</span>
        <span class="kd">var</span> <span class="py">id</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="kd">val</span> <span class="py">items</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="nc">Item</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nc">Item</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nc">Item</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="kd">val</span> <span class="py">subItems</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">sliceItems</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subItems: $subItems"</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceItems: $sliceItems"</span><span class="p">)</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"\n----- items[1].id = 200 -----\n"</span><span class="p">)</span>
    <span class="n">items</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">id</span> <span class="p">=</span> <span class="mi">200</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subItems: $subItems"</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceItems: $sliceItems"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://i.imgur.com/JWNCjkG.png" alt="" /></p>

<p>이번에는 원래 리스트의 1번 인덱스에 있는 데이터클래스의 프로퍼티를 변경했더니, <code class="language-plaintext highlighter-rouge">subList</code>와 <code class="language-plaintext highlighter-rouge">slice</code> 모두 변경이 반영되었다.</p>

<h3 id="중간-결과">중간 결과</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">List</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">slice</span><span class="p">(</span><span class="n">indices</span><span class="p">:</span> <span class="nc">IntRange</span><span class="p">):</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>  
	<span class="k">if</span> <span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="k">return</span> <span class="nf">listOf</span><span class="p">()</span>  
	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="n">indices</span><span class="p">.</span><span class="n">start</span><span class="p">,</span> <span class="n">indices</span><span class="p">.</span><span class="n">endInclusive</span> <span class="p">+</span> <span class="mi">1</span><span class="p">).</span><span class="nf">toList</span><span class="p">()</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">slice</code>는 내부적으로 반환 전 마지막에 <code class="language-plaintext highlighter-rouge">asList()</code> 혹은 <code class="language-plaintext highlighter-rouge">toList()</code>를 사용한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">Iterable</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">toList</span><span class="p">():</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>  
	<span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="nc">Collection</span><span class="p">)</span> <span class="p">{</span>  
		<span class="k">return</span> <span class="k">when</span> <span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>  
			<span class="mi">0</span> <span class="p">-&gt;</span> <span class="nf">emptyList</span><span class="p">()</span>  
			<span class="mi">1</span> <span class="p">-&gt;</span> <span class="nf">listOf</span><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="nc">List</span><span class="p">)</span> <span class="k">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">else</span> <span class="nf">iterator</span><span class="p">().</span><span class="nf">next</span><span class="p">())</span>  
			<span class="k">else</span> <span class="p">-&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nf">toMutableList</span><span class="p">()</span>  
		<span class="p">}</span>  
	<span class="p">}</span>  
	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">toMutableList</span><span class="p">().</span><span class="nf">optimizeReadOnlyList</span><span class="p">()</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">toList()</code>는 다시 <code class="language-plaintext highlighter-rouge">this.toMutableList()</code>를 반환한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">Collection</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">toMutableList</span><span class="p">():</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>  
	<span class="k">return</span> <span class="nc">ArrayList</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">toMutableList()</code>는 결국 ArrayList의 생성자로 사용되며 결과적으로 <strong>원래 리스트의 일부 영역을 얕은 복사 한 효과</strong>를 가진다.</p>

<blockquote>
  <p>얕은 복사는 객체의 주소 값을 복사하는 것이기 때문에 리터럴인 정수는 원래 리스트에서 변경되어도 반영이 안되었지만, 데이터클래스를 사용한 리스트에서는 데이터클래스의 객체 주소 값이 복사되었기 때문에 원래 리스트와 <code class="language-plaintext highlighter-rouge">slice()</code> 한 리스트 모두 같은 객체를 참조하고 있는 것이다.</p>
</blockquote>

<p>그렇다면, <code class="language-plaintext highlighter-rouge">subList()</code>는 어떻게 동작하길래 항상 변경이 반영되는 것일까?</p>

<p>주석을 살펴보면 그 이유를 알 수 있다.</p>

<p>예시를 통해 마저 알아보자.</p>

<h3 id="case3-원래-리스트의-구조적-변경">case3: 원래 리스트의 구조적 변경</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">origin</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">subList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">subList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">sliceList</span> <span class="p">=</span> <span class="n">origin</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">2</span><span class="p">)</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"subList: $subList"</span><span class="p">)</span> <span class="c1">// subList: [2, 3]</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceList: $sliceList"</span><span class="p">)</span> <span class="c1">// sliceList: [2, 3]</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"\n----- origin.removeLast() -----\n"</span><span class="p">)</span>
    <span class="n">origin</span><span class="p">.</span><span class="nf">removeLast</span><span class="p">()</span>

    <span class="nf">println</span><span class="p">(</span><span class="s">"sliceList: $sliceList"</span><span class="p">)</span> <span class="c1">// sliceList: [2, 3]</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"subList: $subList"</span><span class="p">)</span> <span class="c1">// throw: java.util.ConcurrentModificationException</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">ConcurrentModificationException</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">e</span><span class="p">.</span><span class="nf">printStackTrace</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://i.imgur.com/FAngFMi.png" alt="" /></p>

<p>원래 리스트의 마지막 요소를 제거해보았다. (구조적 변경)</p>

<p>그랬더니 <code class="language-plaintext highlighter-rouge">slice</code>는 예상한대로 출력이 되지만, <code class="language-plaintext highlighter-rouge">subList</code>는 <strong>ConcurrentModificationException</strong>을 발생시킨다.</p>

<p>즉, <code class="language-plaintext highlighter-rouge">subList</code>는 원래 리스트를 참조하고 있고, 원래 리스트에 구조적인 변경이 발생하면 예외를 발생시킨다. 주석의 “뷰의 일부(view of the portion of this list)” 라는 표현이 이런 동작을 잘 설명하고 있는 것 같다.</p>

<h2 id="결론">결론</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">subList</code>는 <strong>원래 리스트를 참조</strong>하기 때문에 원래 리스트나 subList의 결과 리스트의 변경이 동기화되며, 원래 리스트에 구조적 변경이 발생되면 ConcurrentModificationException을 발생시킨다.</li>
  <li><code class="language-plaintext highlighter-rouge">slice</code>는 원래 리스트의 <strong>일부 아이템들을 얕은 복사</strong>하기 때문에 원래 리스트의 구조적 변경에 영향을 받지 않는다.</li>
</ul>]]></content><author><name>mangbaam</name></author><category term="Kotlin" /><category term="kotlin" /><category term="list" /><category term="collections" /><summary type="html"><![CDATA[subList]]></summary></entry><entry><title type="html">SavedStateHandle과 커스텀 SaveableStateFlow</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2023/05/28/saved-state-handle.html" rel="alternate" type="text/html" title="SavedStateHandle과 커스텀 SaveableStateFlow" /><published>2023-05-28T00:00:00+00:00</published><updated>2023-05-28T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2023/05/28/saved-state-handle</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2023/05/28/saved-state-handle.html"><![CDATA[<p><img src="https://github.com/mangbaam/MySampleApps/assets/44221447/4a984a77-90a5-4caa-bf40-191bce080e17" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">ViewModel</code>은 화면 회전 같은 Configuration change 상황에서 사용할 수 있지만, 시스템에 의해 프로세스가 종료되는 상황을 대응할 때는 <code class="language-plaintext highlighter-rouge">SavedStateHandle</code>을 사용할 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">SavedStateHandle</code>은 <code class="language-plaintext highlighter-rouge">ViewModel</code> 객체에서 생성자로 받을 수 있으며, 키-값 맵 형태로 상태를 저장하거나 저장된 상태를 가져올 수 있다.
<code class="language-plaintext highlighter-rouge">SavedStateHandle</code>에 저장된 상태들은 시스템에 의해 프로세스가 종료된 후에도 유지되지만 사용자에 의한 앱 강제 종료, 최근 메뉴에서 종료, 디바이스 재부팅 등의 상황에서는 유지할 수 없다. (Task Stack 에서 제거되면 함께 사라진다)</p>

<h2 id="어떤-값을-저장해야-할까">어떤 값을 저장해야 할까?</h2>

<p>일반적으로 텍스트 필드의 입력 값, 스크롤 위치, 탐색 중이던 항목의 ID 등의 상태를 저장할 수 있다.
저장되는 상태들은 단순하고 가벼운 형태여야 하며, 저장할 값이 복잡하거나 큰 경우는 DB와 같은 곳에 저장하는 것이 좋다.</p>

<h3 id="저장할-수-있는--타입">저장할 수 있는  타입</h3>

<p><code class="language-plaintext highlighter-rouge">SavedStateHandle</code>에 저장되는 데이터는 액티비티나 프래그먼트의 <code class="language-plaintext highlighter-rouge">SavedInstanceState</code>처럼 <code class="language-plaintext highlighter-rouge">Bundle</code>로 저장되기 때문에 <code class="language-plaintext highlighter-rouge">Bundle</code>에서 지원하는 값으로 저장할 수 있다.</p>

<table>
  <thead>
    <tr>
      <th>타입/클래스</th>
      <th>배열</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>double</td>
      <td>double[]</td>
    </tr>
    <tr>
      <td>int</td>
      <td>int[]</td>
    </tr>
    <tr>
      <td>long</td>
      <td>long[]</td>
    </tr>
    <tr>
      <td>String</td>
      <td>String[]</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>byte[]</td>
    </tr>
    <tr>
      <td>char</td>
      <td>char[]</td>
    </tr>
    <tr>
      <td>CharSequence</td>
      <td>CharSequence[]</td>
    </tr>
    <tr>
      <td>float</td>
      <td>float[]</td>
    </tr>
    <tr>
      <td>Parcelable</td>
      <td>Parcelable[]</td>
    </tr>
    <tr>
      <td>Serializable</td>
      <td>Serializable[]</td>
    </tr>
    <tr>
      <td>short</td>
      <td>short[]</td>
    </tr>
    <tr>
      <td>SparseArray</td>
      <td> </td>
    </tr>
    <tr>
      <td>Binder</td>
      <td> </td>
    </tr>
    <tr>
      <td>Bundle</td>
      <td> </td>
    </tr>
    <tr>
      <td>ArrayList</td>
      <td> </td>
    </tr>
    <tr>
      <td>Size (API 21+)</td>
      <td> </td>
    </tr>
    <tr>
      <td>SizeF (API 21+)</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="사용-방법">사용 방법</h2>

<h3 id="뷰모델의-생성자에-savedstatehandle-제공">뷰모델의 생성자에 SavedStateHandle 제공</h3>

<p><strong>Activity 1.1.0</strong>, <strong>Fragment 1.2.0</strong> 버전부터 <code class="language-plaintext highlighter-rouge">ViewModel</code>의 생성자에 <code class="language-plaintext highlighter-rouge">SavedStateHandle</code>을 사용할 수 있다.</p>

<p>뷰모델에서 다음과 같이 생성자를 선언하고</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SavedStateViewModel</span><span class="p">(</span>
	<span class="k">private</span> <span class="kd">val</span> <span class="py">state</span><span class="p">:</span> <span class="nc">SavedStateHandle</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
	<span class="o">..</span><span class="p">.</span> 
<span class="p">}</span>
</code></pre></div></div>

<p>액티비티나 프래그먼트에서는 ViewModel 팩토리로 SavedStateHandle을 제공할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainFragment</span> <span class="p">:</span> <span class="nc">Fragment</span><span class="p">()</span> <span class="p">{</span> 
	<span class="kd">val</span> <span class="py">vm</span><span class="p">:</span> <span class="nc">SavedStateViewModel</span> <span class="k">by</span> <span class="nf">viewModels</span><span class="p">()</span> 
	<span class="o">..</span><span class="p">.</span> 
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">by viewModels()</code>가 아닌 커스텀으로 제공할 때는 <code class="language-plaintext highlighter-rouge">AbstractSavedStateViewModelFactory</code>를 확장하여 사용할 수도 있다.</p>

<h3 id="savedstatehandle-사용법">SavedStateHandle 사용법</h3>

<p><code class="language-plaintext highlighter-rouge">SavedStateHandle</code> 에서 사용할 수 있는 메서드</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">get(key: String)</code>: key 로 저장된 값을 반환</li>
  <li><code class="language-plaintext highlighter-rouge">set(key: String, value: T?)</code>: key - value 를 저장</li>
  <li><code class="language-plaintext highlighter-rouge">keys()</code>: SavedStateHandle에 포함된 모든 키를 반환</li>
  <li><code class="language-plaintext highlighter-rouge">containts(key: String)</code>: key에 대한 값이 존재하는지 확인</li>
  <li><code class="language-plaintext highlighter-rouge">remove(key: String)</code>: key에 대한 값을 제거</li>
  <li><code class="language-plaintext highlighter-rouge">getLiveData(key: String)</code>: key에 대한 값을 LiveData로 반환 <strong>(밑에서 설명)</strong></li>
  <li><code class="language-plaintext highlighter-rouge">getStateFlow(key: String, initialValue: T)</code>: key에 대한 값을 StateFlow로 반환 <strong>(밑에서 설명)</strong></li>
</ul>

<h3 id="livedata">LiveData</h3>

<p><code class="language-plaintext highlighter-rouge">getLiveData()</code>를 사용하면 <code class="language-plaintext highlighter-rouge">SavedStateHandle</code>에서 <code class="language-plaintext highlighter-rouge">LiveData</code>에 래핑된 값을 받을 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SavedStateViewModel</span><span class="p">(</span>
	<span class="k">private</span> <span class="kd">val</span> <span class="py">savedStateHandle</span><span class="p">:</span> <span class="nc">SavedStateHandle</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span> 
	<span class="kd">val</span> <span class="py">filteredData</span><span class="p">:</span> <span class="nc">LiveData</span><span class="p">&lt;</span><span class="nc">List</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;&gt;</span> <span class="p">=</span> 
	<span class="n">savedStateHandle</span><span class="p">.</span><span class="n">getLiveData</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;(</span><span class="s">"query"</span><span class="p">).</span><span class="nf">switchMap</span> <span class="p">{</span> <span class="n">query</span> <span class="p">-&gt;</span> 
		<span class="n">repository</span><span class="p">.</span><span class="nf">getFilteredData</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> 
	<span class="p">}</span> 
	
	<span class="k">fun</span> <span class="nf">setQuery</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span> <span class="n">savedStateHandle</span><span class="p">[</span><span class="s">"query"</span><span class="p">]</span> <span class="p">=</span> <span class="n">query</span> <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

<h3 id="stateflow">StateFlow</h3>

<blockquote>
  <p>lifecycle 2.5.0부터 지원</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">getStateFlow()</code>를 사용하여 <code class="language-plaintext highlighter-rouge">SavedStateHandle</code>에서 <code class="language-plaintext highlighter-rouge">StateFlow</code>에 래핑된 값을 받을 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SavedStateViewModel</span><span class="p">(</span>
	<span class="k">private</span> <span class="kd">val</span> <span class="py">savedStateHandle</span><span class="p">:</span> <span class="nc">SavedStateHandle</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span> 
	<span class="kd">val</span> <span class="py">filteredData</span><span class="p">:</span> <span class="nc">StateFlow</span><span class="p">&lt;</span><span class="nc">List</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;&gt;</span> <span class="p">=</span> 
	<span class="n">savedStateHandle</span><span class="p">.</span><span class="n">getStateFlow</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;(</span><span class="s">"query"</span><span class="p">)</span> <span class="p">.</span><span class="nf">flatMapLatest</span> <span class="p">{</span> <span class="n">query</span> <span class="p">-&gt;</span> 
		<span class="n">repository</span><span class="p">.</span><span class="nf">getFilteredData</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> 
	<span class="p">}</span> 
	<span class="k">fun</span> <span class="nf">setQuery</span><span class="p">(</span><span class="n">query</span><span class="p">:</span> <span class="nc">String</span><span class="p">)</span> <span class="p">{</span> <span class="n">savedStateHandle</span><span class="p">[</span><span class="s">"query"</span><span class="p">]</span> <span class="p">=</span> <span class="n">query</span> <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div></div>

<h2 id="saveablemutablestateflow">SaveableMutableStateFlow</h2>

<blockquote>
  <p>이 타입은 Android 에서 제공되는 것이 아닌 커스텀 한 타입입니다</p>
</blockquote>

<p>ViewModel에서 StateFlow 에 상태를 저장해도 메모리가 부족하면 시스템에 의해 프로세스가 정리되고, ViewModel 객체 역시 메모리에 유지되던 것이기 때문에 ViewModel 객체가 정리되면서 상태 역시 잃어버릴 수 있다. 이를 방지하기 위해 SavedStateHandle 와 StateFlow 의 장점을 모두 활용하는 <code class="language-plaintext highlighter-rouge">SaveableMutableStateFlow</code> 타입을 만들어 보았다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SaveableMutableStateFlow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;(</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">savedStateHandle</span><span class="p">:</span> <span class="nc">SavedStateHandle</span><span class="p">,</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">key</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">initialValue</span><span class="p">:</span> <span class="nc">T</span><span class="p">,</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">MutableStateFlow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MutableStateFlow 를 상속해서 만들며, <code class="language-plaintext highlighter-rouge">SavedStateHandle</code>과 키, 초기 값을 받는다.</p>

<p>왠만하면 상속을 피하는 것이 좋지만 MutableStateFlow 를 상속한 이유는 SavedStateHandle 로 저장할 수 있는 타입이 한정적이기 때문에 SaveableMutableStateFlow 를 사용할 수 없는 경우 MutableStateFlow 로 사용할 수 있도록 동일한 타입으로 만들어주기 위해 상속을 사용했다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kd">val</span> <span class="py">_state</span> <span class="p">=</span> <span class="k">try</span> <span class="p">{</span>
    <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="n">savedStateHandle</span><span class="p">.</span><span class="nf">getStateFlow</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">initialValue</span><span class="p">).</span><span class="n">value</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">_</span><span class="p">:</span> <span class="nc">IllegalArgumentException</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">MutableStateFlow</span><span class="p">(</span><span class="n">initialValue</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>구현의 간소화를 위해 내부적으로 MutableStateFlow 를 사용했다. 이때 SavedStateHandle 에서 <code class="language-plaintext highlighter-rouge">getStateFlow</code>를 통해 StateFlow 를 가져오고, 만약 지원되지 않는 타입의 경우 직접 MutableStateFlow 객체를 생성해서 할당하게 된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">var</span> <span class="py">value</span><span class="p">:</span> <span class="nc">T</span>
<span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_state</span><span class="p">.</span><span class="n">value</span>
<span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="n">savedStateHandle</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="p">=</span> <span class="n">value</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">_</span><span class="p">:</span> <span class="nc">IllegalArgumentException</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
    <span class="n">_state</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
<span class="p">}</span>
</code></pre></div></div>

<p>MutableStateFlow 를 상속하면 구현해야 하는 추상 프로퍼티와 메서드가 여럿 있는데 그 중 value 도 있다.</p>

<p>value 를 설정할 때는 savedStateHandle 에도 저장하는 것이 SaveableMutableStateFlow 의 핵심 동작이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nc">SavedStateHandle</span><span class="p">.</span><span class="nf">getSaveableMutableStateFlow</span><span class="p">(</span>
    <span class="n">key</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="n">initialValue</span><span class="p">:</span> <span class="nc">T</span><span class="p">,</span>
<span class="p">):</span> <span class="nc">SaveableMutableStateFlow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">=</span>
    <span class="nc">SaveableMutableStateFlow</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">initialValue</span><span class="p">)</span>
</code></pre></div></div>

<p>SavedStateHandle 에서 바로 SaveableMutableStateFlow 를 가져오기 편하도록 확장함수로 만들었다.</p>

<blockquote>
  <p>전체 구현은 <a href="https://github.com/mangbaam/MySampleApps/blob/master/SaveableMutableStateFlow/app/src/main/java/com/example/saveablemutablestateflow/SaveableStateFlow.kt">Github</a>에서 볼 수 있습니다.</p>
</blockquote>

<p>ViewModel 에서는 다음과 같이 사용할 수 있다</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainViewModel</span><span class="p">(</span>
    <span class="n">savedStateHandle</span><span class="p">:</span> <span class="nc">SavedStateHandle</span><span class="p">,</span>
<span class="p">)</span> <span class="p">:</span> <span class="nc">ViewModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_textSaveableStateFlow</span> <span class="p">=</span>
        <span class="n">savedStateHandle</span><span class="p">.</span><span class="nf">getSaveableMutableStateFlow</span><span class="p">(</span><span class="s">"userInput"</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">textSaveableStateFlow</span> <span class="p">=</span> <span class="n">_textSaveableStateFlow</span><span class="p">.</span><span class="nf">asStateFlow</span><span class="p">()</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="샘플-앱">샘플 앱</h2>

<h3 id="화면-회전">화면 회전</h3>

<blockquote>
  <p>화면을 회전하여 Configuration change 상황을 발생시켰다.</p>
</blockquote>

<p>회전 전</p>

<p><img width="33%" alt="image" src="https://github.com/mangbaam/MySampleApps/assets/44221447/61c54939-5bdb-44ff-a5da-e4e605d5cb84" /></p>

<p>회전 후</p>

<p><img width="33%" alt="image" src="https://github.com/mangbaam/MySampleApps/assets/44221447/bf0abf5c-ab6d-443f-abbb-b7ea11321e1a" /></p>

<p>버튼 밑의 숫자들은 각각 액티비티의 전역 변수, MutableStateFlow, SaveableMutableStateFlow 로 저장되고 있다.</p>

<p>예상대로 액티비티의 전역 변수로 관리되는 첫 번째 숫자는 <strong>화면 회전 후 0으로 초기화</strong> 되었고, 나머지 두 개는 상태를 유지했다.</p>

<p>EditText 에 표시되는 글자들도 각각 액티비티의 전역 변수, MutableStateFlow, SaveableMutableStateFlow 로 저장되었는데, TextView 와는 다르게 <strong>모두 상태를 유지했다.</strong></p>

<p>그 이유는 다음과 같다.</p>

<p><img width="901" alt="image" src="https://github.com/mangbaam/MySampleApps/assets/44221447/b2d51c2a-ec46-4fba-9d3a-1f913d017638" /></p>

<p>위 사진은 <a href="https://developer.android.com/guide/components/activities/activity-lifecycle?hl=ko#instance-state">공식 문서</a>에서 발췌한 내용이다. 밑에 있는 <strong>참고</strong>와 함께 보면 <code class="language-plaintext highlighter-rouge">android:id</code> 속성이 부여된 경우 액티비티에 있는 View 객체 정보를 <code class="language-plaintext highlighter-rouge">Bundle</code>에 저장했다가 복원한다고 설명되어 있다. 그래서 EditText 내부에서 상태를 별도로 관리하고 있기 때문에 안드로이드 시스템이 이를 저장했다가 복원할 수 있었던 것이다.</p>

<h3 id="시스템에-의한-프로세스-종료">시스템에 의한 프로세스 종료</h3>

<blockquote>
  <p>터미널에서 ` adb shell am kill “com.example.saveablemutablestateflow”` 명령으로 프로세스를 kill 할 수 있다.</p>
</blockquote>

<p>프로세스 kill 이전</p>

<p><img width="33%" alt="image" src="https://github.com/mangbaam/MySampleApps/assets/44221447/0d466088-b3ed-44fb-bf13-5074ffbff6d9" /></p>

<p>프로세스 kill 이후</p>

<p><img width="33%" alt="image" src="https://github.com/mangbaam/MySampleApps/assets/44221447/ba6353c0-f7a0-4b15-8c97-44a538a694c3" /></p>

<p>EditText 에 표시되는 값은 앞서 설명했듯이 <code class="language-plaintext highlighter-rouge">Bundle</code>에 저장되어 복원되기 때문에 이번에도 역시 살아남았다.</p>

<p>TextView 에 표시되는 숫자의 경우는 <code class="language-plaintext highlighter-rouge">SaveableMutableStateFlow</code> 로 저장된 상태를 제외하고는 <strong>모두 0으로 초기화 되었다.</strong></p>

<p>추가적으로 스크롤 상태도 유지하는 것을 확인할 수 있다.</p>

<p>샘플 프로젝트는 <a href="https://github.com/mangbaam/MySampleApps/tree/master/SaveableMutableStateFlow">Github</a>에서 확인할 수 있다.</p>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="custom" /><category term="state" /><category term="configuration change" /><category term="viewmodel" /><category term="savedinstancestate" /><category term="bundle" /><category term="flow" /><category term="stateflow" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Android Compose - Coil 로 불러온 이미지의 비율 알아내기</title><link href="https://mangbaam.github.io//jekyll-theme-yat/compose/2023/02/17/android-compose-coin-image-ratio.html" rel="alternate" type="text/html" title="Android Compose - Coil 로 불러온 이미지의 비율 알아내기" /><published>2023-02-17T00:00:00+00:00</published><updated>2023-02-17T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/compose/2023/02/17/android-compose-coin-image-ratio</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/compose/2023/02/17/android-compose-coin-image-ratio.html"><![CDATA[<blockquote>
  <p>비율 계산 코드 : <a href="#비율-계산">이동</a></p>
</blockquote>

<h2 id="문제-상황">문제 상황</h2>

<p><img src="https://i.imgur.com/tJF3e7a.gif" alt="문제상황" /></p>

<p>이미지를 클릭하면 다이얼로그로 크롭되지 않은 원본 비율의 사진을 보여줘야 한다.</p>

<p>하지만 이미지가 불러와지기 전에 화면을 가득 채우는 현상이 있었다.
(그 와중에 태극기는 바로 불러와지는 ㅋㅋ 🇰🇷 펄럭)</p>

<h3 id="문제-상황-1">문제 상황</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Dialog</span><span class="p">(</span><span class="n">onDismissRequest</span> <span class="p">=</span> <span class="p">{</span> <span class="p">})</span> <span class="p">{</span>  
    <span class="nc">Surface</span><span class="p">(</span>  
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">().</span><span class="nf">wrapContentHeight</span><span class="p">(),</span>  <span class="c1">// &lt;--</span>
        <span class="n">shape</span> <span class="p">=</span> <span class="nc">RoundedCornerShape</span><span class="p">(</span><span class="mi">8</span><span class="p">.</span><span class="n">dp</span><span class="p">),</span>  
        <span class="n">color</span> <span class="p">=</span> <span class="nc">MaterialTheme</span><span class="p">.</span><span class="n">colorScheme</span><span class="p">.</span><span class="n">background</span><span class="p">,</span>  
    <span class="p">)</span> <span class="p">{</span>  
        <span class="nc">PhotoDetail</span><span class="p">(</span>  
            <span class="n">photo</span> <span class="p">=</span> <span class="n">photo</span><span class="p">,</span>
            <span class="c1">// ... </span>
        <span class="p">)</span>  
    <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>다이얼로그를 띄우는 부분이다. <code class="language-plaintext highlighter-rouge">Surface</code> 로 width를 가득 채우고, height는 <code class="language-plaintext highlighter-rouge">wrapContentHeight</code> 로 설정하였다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Column</span><span class="p">(</span>  
    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>  
        <span class="p">.</span><span class="nf">wrapContentHeight</span><span class="p">()</span>  
        <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">bottom</span> <span class="p">=</span> <span class="mi">30</span><span class="p">.</span><span class="n">dp</span><span class="p">),</span>  
    <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterHorizontally</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="nc">Box</span><span class="p">(</span>  
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>  
            <span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">()</span>  
            <span class="p">.</span><span class="nf">wrapContentHeight</span><span class="p">(),</span>  
    <span class="p">)</span> <span class="p">{</span>
	    <span class="c1">// 사진이 들어가는 부분</span>
	    <span class="nc">AsyncImage</span><span class="p">(</span>  
		    <span class="n">model</span> <span class="p">=</span> <span class="n">photo</span><span class="p">.</span><span class="n">loadUrlMedium</span><span class="p">,</span>  
		    <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">"Photo detail : ${photo.title}"</span><span class="p">,</span>  
		    <span class="n">contentScale</span> <span class="p">=</span> <span class="nc">ContentScale</span><span class="p">.</span><span class="nc">FillWidth</span><span class="p">,</span>  
		    <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">(),</span>  
		<span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// 텍스트와 버튼 그리고 공백</span>
	
</code></pre></div></div>

<p>Column 을 <code class="language-plaintext highlighter-rouge">wrapContentHeight</code> 로 만들었다.</p>

<p>사진이 로드되기 전 <code class="language-plaintext highlighter-rouge">wrapContentHeight</code> 로 높이를 계산하지 못해 생기는 문제였다</p>

<h2 id="해결-방법">해결 방법</h2>

<ul>
  <li>사진 목록을 표시할 때 이미 한 번 사진을 로드한다. 이때 비율을 계산할 수 있다</li>
  <li>비율을 계산한다</li>
  <li>클릭 이벤트에서 계산된 비율이 반영된 모델을 넘겨준다</li>
  <li>넘겨 받은 비율로 다이얼로그의 사진 부분의 비율을 미리 설정한다</li>
</ul>

<p>그 결과 불필요한 계산 작업(<code class="language-plaintext highlighter-rouge">wrapContentHeight</code>)을 하지 않고도 깔끔하게 다이얼로그를 띄울 수 있다</p>

<h3 id="photo-모델에-ratio-프로퍼티-추가">Photo 모델에 <code class="language-plaintext highlighter-rouge">ratio</code> 프로퍼티 추가</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">PhotoUIModel</span><span class="p">(</span>  
    <span class="kd">val</span> <span class="py">id</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>  
    <span class="kd">val</span> <span class="py">owner</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>  
    <span class="kd">val</span> <span class="py">secret</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>  
    <span class="kd">val</span> <span class="py">server</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>  
    <span class="kd">val</span> <span class="py">title</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">""</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="py">loadUrlSmall</span><span class="p">:</span> <span class="nc">String</span> <span class="c1">// 검색화면 표시용  </span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="s">"https://live.staticflickr.com/$server/${id}_${secret}_n.jpg"</span>  
    <span class="kd">val</span> <span class="py">loadUrlMedium</span><span class="p">:</span> <span class="nc">String</span> <span class="c1">// 다운로드 확인용  </span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="s">"https://live.staticflickr.com/$server/${id}_$secret.jpg"</span>  
    <span class="kd">val</span> <span class="py">loadUrlOriginal</span><span class="p">:</span> <span class="nc">String</span> <span class="c1">// 다운로드용  </span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="s">"https://live.staticflickr.com/$server/${id}_${secret}_o.jpg"</span>  
    <span class="kd">val</span> <span class="py">photoId</span><span class="p">:</span> <span class="nc">String</span>  
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="s">"$owner/$id"</span>  
  
    <span class="kd">var</span> <span class="py">ratio</span><span class="p">:</span> <span class="nc">Float</span> <span class="p">=</span> <span class="mf">1f</span>  <span class="c1">// &lt;-- 새로 추가함</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ratio</code> 를 프로퍼티로 추가했고, <strong>1f</strong>로 비율을 초기화하였다.</p>

<h3 id="coil-로-이미지-로드">Coil 로 이미지 로드</h3>

<p>Coil에서 이미지 UI를 표시하기 위해 보통 <code class="language-plaintext highlighter-rouge">AsyncImage</code> 컴포저블을 사용한다. 이렇게 하면 자체적으로 이미지를 표시할 수 있기 때문에 편리하지만 이미지의 속성이나 로딩 상태를 컨트롤 할 수 없다.</p>

<p>그래서 내부적으로 사용하는 <a href="https://coil-kt.github.io/coil/compose/#asyncimagepainter"><code class="language-plaintext highlighter-rouge">rememberAsyncImagePainter</code></a> 를 사용하게 되었다</p>

<p><em>단, <code class="language-plaintext highlighter-rouge">rememberAsyncImagePainter</code> 는 low-level API이기 때문에 변경될 가능성이 있다</em></p>

<h3 id="비율-계산">비율 계산</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">painter</span> <span class="p">=</span> <span class="nf">rememberAsyncImagePainter</span><span class="p">(</span>  
    <span class="n">model</span> <span class="p">=</span> <span class="n">photo</span><span class="p">.</span><span class="n">loadUrlSmall</span><span class="p">,</span>  
    <span class="n">placeholder</span> <span class="p">=</span> <span class="nf">painterResource</span><span class="p">(</span><span class="n">id</span> <span class="p">=</span> <span class="nc">R</span><span class="p">.</span><span class="n">drawable</span><span class="p">.</span><span class="n">charlezzicon</span><span class="p">),</span>  
<span class="p">)</span>  
<span class="kd">val</span> <span class="py">imageRatio</span> <span class="p">=</span> <span class="nf">remember</span><span class="p">(</span><span class="n">painter</span><span class="p">.</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="py">imageSize</span> <span class="p">=</span> <span class="n">painter</span><span class="p">.</span><span class="n">intrinsicSize</span>  
    <span class="n">imageSize</span><span class="p">.</span><span class="n">width</span> <span class="p">/</span> <span class="n">imageSize</span><span class="p">.</span><span class="n">height</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">rememberAsyncImagePainter</code> 의 반환 값은 Coil의 <code class="language-plaintext highlighter-rouge">AsyncImagePainter</code> 타입이며, 이는 컴포즈의 <code class="language-plaintext highlighter-rouge">Painter</code> 클래스의 하위 타입이다.</p>

<p><img src="https://i.imgur.com/tgW7Mqf.png" width="33%" /></p>

<p><code class="language-plaintext highlighter-rouge">AsyncImagePainter</code> 는 이미지 로딩 <strong>State</strong> 를 가지고 있으며, <strong>State</strong> 는 다음의 속성들을 가지고 있다</p>

<p>imageRatio 에서는 remember 의 key 로 <code class="language-plaintext highlighter-rouge">patiner.state</code> 를 사용했다. 즉, 이미지 로딩이 완료되면 state가 <strong>Success</strong> 가 되고, 이때 imageRatio 를 계산한 값으로 업데이트 되기 때문에 최신의 비율을 받아볼 수 있게 된다.</p>

<h3 id="coil-asyncimagepainter-의-state">Coil AsyncImagePainter 의 State</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sealed</span> <span class="kd">class</span> <span class="nc">State</span> <span class="p">{</span>  
  
    <span class="cm">/** The current painter being drawn by [AsyncImagePainter]. */</span>  
    <span class="k">abstract</span> <span class="kd">val</span> <span class="py">painter</span><span class="p">:</span> <span class="nc">Painter</span><span class="p">?</span>  
  
    <span class="cm">/** The request has not been started. */</span>  
    <span class="kd">object</span> <span class="nc">Empty</span> <span class="p">:</span> <span class="nc">State</span><span class="p">()</span> <span class="p">{</span>  
        <span class="k">override</span> <span class="kd">val</span> <span class="py">painter</span><span class="p">:</span> <span class="nc">Painter</span><span class="p">?</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="k">null</span>  
    <span class="p">}</span>  
  
    <span class="cm">/** The request is in-progress. */</span>  
    <span class="kd">data class</span> <span class="nc">Loading</span><span class="p">(</span>  
        <span class="k">override</span> <span class="kd">val</span> <span class="py">painter</span><span class="p">:</span> <span class="nc">Painter</span><span class="p">?,</span>  
    <span class="p">)</span> <span class="p">:</span> <span class="nc">State</span><span class="p">()</span>  
  
    <span class="cm">/** The request was successful. */</span>  
    <span class="kd">data class</span> <span class="nc">Success</span><span class="p">(</span>  
        <span class="k">override</span> <span class="kd">val</span> <span class="py">painter</span><span class="p">:</span> <span class="nc">Painter</span><span class="p">,</span>  
        <span class="kd">val</span> <span class="py">result</span><span class="p">:</span> <span class="nc">SuccessResult</span><span class="p">,</span>  
    <span class="p">)</span> <span class="p">:</span> <span class="nc">State</span><span class="p">()</span>  
  
    <span class="cm">/** The request failed due to [ErrorResult.throwable]. */</span>  
    <span class="kd">data class</span> <span class="nc">Error</span><span class="p">(</span>  
        <span class="k">override</span> <span class="kd">val</span> <span class="py">painter</span><span class="p">:</span> <span class="nc">Painter</span><span class="p">?,</span>  
        <span class="kd">val</span> <span class="py">result</span><span class="p">:</span> <span class="nc">ErrorResult</span><span class="p">,</span>  
    <span class="p">)</span> <span class="p">:</span> <span class="nc">State</span><span class="p">()</span>  
<span class="p">}</span>
</code></pre></div></div>

<h3 id="이미지-표시하기-및-비율-반영">이미지 표시하기 및 비율 반영</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span><span class="p">(</span>  
    <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>  
        <span class="p">.</span><span class="nf">width</span><span class="p">(</span><span class="n">minSize</span><span class="p">)</span>  
        <span class="p">.</span><span class="nf">aspectRatio</span><span class="p">(</span><span class="mf">1f</span><span class="p">)</span>  
        <span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">(),</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="nc">Image</span><span class="p">(</span>  
        <span class="n">painter</span> <span class="p">=</span> <span class="n">painter</span><span class="p">,</span>  
        <span class="n">contentDescription</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>  
        <span class="n">contentScale</span> <span class="p">=</span> <span class="nc">ContentScale</span><span class="p">.</span><span class="nc">Crop</span><span class="p">,</span>  
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span>  
            <span class="p">.</span><span class="nf">fillMaxSize</span><span class="p">()</span>  
            <span class="p">.</span><span class="nf">clickable</span> <span class="p">{</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">photo</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span> <span class="n">ratio</span> <span class="p">=</span> <span class="n">imageRatio</span> <span class="p">})</span> <span class="p">},</span>  
    <span class="p">)</span>  
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AsyncImagePainter</code> 는 앞서 말했듯이 컴포즈의 <code class="language-plaintext highlighter-rouge">Painter</code> 타입이기 때문에 <code class="language-plaintext highlighter-rouge">Image</code> 컴포저블의 <code class="language-plaintext highlighter-rouge">painter</code> 파라미터로 사용할 수 있다.</p>

<p>클릭이 일어날 때 해당 모델의 ratio 속성으로 앞서 계산한 imageRatio 값을 적용하고 넘겨주게 된다.</p>

<h3 id="다이얼로그-비율-설정하기">다이얼로그 비율 설정하기</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Column</span><span class="p">(</span>  
    <span class="n">modifier</span> <span class="p">=</span> <span class="n">modifier</span>  
        <span class="p">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">bottom</span> <span class="p">=</span> <span class="mi">30</span><span class="p">.</span><span class="n">dp</span><span class="p">)</span>  
        <span class="p">.</span><span class="nf">wrapContentHeight</span><span class="p">(),</span>  
    <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="nc">Alignment</span><span class="p">.</span><span class="nc">CenterHorizontally</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="nc">Box</span><span class="p">(</span>  
        <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">aspectRatio</span><span class="p">(</span><span class="n">photo</span><span class="p">.</span><span class="n">ratio</span><span class="p">),</span>  
    <span class="p">)</span> <span class="p">{</span> 
		<span class="c1">// 사진이 들어가는 부분</span>
        <span class="nc">AsyncImage</span><span class="p">(</span>  
            <span class="n">model</span> <span class="p">=</span> <span class="n">photo</span><span class="p">.</span><span class="n">loadUrlMedium</span><span class="p">,</span>  
            <span class="n">contentDescription</span> <span class="p">=</span> <span class="s">"Photo detail : ${photo.title}"</span><span class="p">,</span>  
            <span class="n">contentScale</span> <span class="p">=</span> <span class="nc">ContentScale</span><span class="p">.</span><span class="nc">FillWidth</span><span class="p">,</span>  
            <span class="n">modifier</span> <span class="p">=</span> <span class="nc">Modifier</span><span class="p">.</span><span class="nf">fillMaxWidth</span><span class="p">(),</span>  
        <span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// 텍스트와 버튼 그리고 공백</span>
<span class="p">}</span>
</code></pre></div></div>

<p>사진을 감싸는 <code class="language-plaintext highlighter-rouge">Box</code> 의 <code class="language-plaintext highlighter-rouge">Modifier</code> 에 <code class="language-plaintext highlighter-rouge">aspectRatio</code> 를 <code class="language-plaintext highlighter-rouge">photo.ratio</code> 로 지정한다.</p>

<p><img src="https://i.imgur.com/4D3r9xy.gif" alt="결과" /></p>

<p>그러면 위와 같이 아직 사진이 불러와지지 않은 상황에서도 불러와질 사진의 비율대로 미리 다이얼로그의 크기가 설정되어 표시된다.</p>]]></content><author><name>mangbaam</name></author><category term="Compose" /><category term="compose" /><category term="coil" /><category term="image" /><category term="android" /><summary type="html"><![CDATA[비율 계산 코드 : 이동]]></summary></entry><entry><title type="html">Android throttle click with Flow and without Flow</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2023/02/11/android-throttle-click.html" rel="alternate" type="text/html" title="Android throttle click with Flow and without Flow" /><published>2023-02-11T00:00:00+00:00</published><updated>2023-02-11T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2023/02/11/android-throttle-click</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2023/02/11/android-throttle-click.html"><![CDATA[<h2 id="throttle-이란">Throttle 이란?</h2>

<p>안드로이드와 같은 UI 기반 프레임워크는 클릭과 같은 사용자 이벤트를 다룰 일이 많다.</p>

<p><strong>Throttle</strong>이란 일정 시간 내에 들어온 이벤트 중 하나의 이벤트만 처리하는 기술이다. 이 이벤트는 Flow나 RxJava와 같은 Stream에서는 계속 반복되어 결국 일정한 주기로 이벤트를 처리하게 되고, 클릭과 같은 단발성 이벤트의 경우 한 번만 이벤트를 처리하게 된다.</p>

<p>이때 일정 시간 내의 이벤트 중 가장 먼저 들어온 이벤트만 처리하는 것을 <code class="language-plaintext highlighter-rouge">ThrottleFirst</code>, 가장 마지막에 들어온 이벤트를 처리하는 것을 <code class="language-plaintext highlighter-rouge">ThrottleLast</code>라고 한다. 일반적으로 Throttle이라고 하면 <code class="language-plaintext highlighter-rouge">ThrottleFirst</code>를 칭한다.</p>

<h3 id="throttlefirst">ThrottleFirst</h3>

<p><img src="https://i.imgur.com/RNIETz6.png" alt="" /></p>

<p>Stream을 관찰하고 있을 때, 첫 번째로 방출된 이벤트를 받고, 그 다음 이벤트는 windowDuration(특정 간격)이 지날 때까지 오지 않는다.
즉, 이벤트가 방출될 때 windowDuration이 지났는지 확인하고, 지났다면 방출하고, 지나지 않았다면 버린다.
<strong>주로 클릭 이벤트를 처리할 때 사용한다.</strong> 예를 들어 회원 가입 버튼이 연속으로 눌려서 API 요청이 중복으로 들어가면서 발생하는 오류를 원천적으로 방지할 수 있는 방법이 될 수 있다.</p>

<h3 id="throttlelast">ThrottleLast</h3>

<p><img src="https://i.imgur.com/CbigbGn.png" alt="" /></p>

<p>throttleLast는 intervalDuration(특정 시간)동안 들어온 이벤트 중 가장 최근의 데이터를 방출한다.
<strong>주로 타이머와 같은 곳에 활용된다.</strong></p>

<h3 id="debounce-throttle-with-timeout">Debounce (Throttle with timeout)</h3>

<p>Throttle을 얘기할 때 흔히 <strong>Debounce</strong>가 비교 대상이 된다.</p>

<p>RxJava에서는 <code class="language-plaintext highlighter-rouge">throttleWithTimeout</code>과 <code class="language-plaintext highlighter-rouge">debounce</code>가 있는데, 둘은 동일한 동작을 한다고 한다. (Debounce 라는 용어를 더 많이 사용하므로 이하 Debounce라고 부르겠다)</p>

<p><img src="https://i.imgur.com/mKFJCpp.png" alt="" /></p>

<p>Debounce는 throttleLast와 비슷하지만 동적인 타이머를 가진다. throttleLast가 일정 시간동안 반복되는 것에 반해, Debounce는 일정 시간 내에 새로운 이벤트가 발생하면 타이머가 리셋된다. 그래서 일정 시간 간격 내에 한 번씩은 실행되는 throttleLast와 달리 Debounce는 일정 시간 간격 내에 새로운 이벤트가 계속 발생된다면 이전의 이벤트들은 모두 손실된다.</p>

<p><strong>가장 많이 사용되는 곳이 텍스트 자동 완성이나 쿼리를 날릴 때 이다.</strong></p>

<p>텍스트 필드에 텍스트를 입력할 때 자동 완성 기능을 만들거나 검색 쿼리를 작성하는 경우 글자가 입력되는 동안은 이벤트를 발생시키지 않고, 입력을 마치고 일정 시간이 지나고 나서야 자동 완성을 위한 탐색을 하거나 검색 쿼리를 날리는 동작을 할 수 있다.</p>

<h2 id="throttle-click-with-kotlin-flow">Throttle Click with Kotlin Flow</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nc">View</span><span class="p">.</span><span class="nf">clickFlow</span><span class="p">():</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">Unit</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">callbackFlow</span> <span class="p">{</span>  
    <span class="nf">setOnClickListener</span> <span class="p">{</span> <span class="nf">trySend</span><span class="p">(</span><span class="nc">Unit</span><span class="p">)</span> <span class="p">}</span>  
    <span class="nf">awaitClose</span> <span class="p">{</span> <span class="nf">setOnClickListener</span><span class="p">(</span><span class="k">null</span><span class="p">)</span> <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>클릭을 플로우로 만들어주기 위해 <code class="language-plaintext highlighter-rouge">callbackFlow</code>를 사용했다. 그리고 클릭이 될 때 이벤트를 보내기 위해 <code class="language-plaintext highlighter-rouge">setOnClickListener { trySend(Unit) }</code> 을 작성했다.</p>

<p><code class="language-plaintext highlighter-rouge">awaitClose()</code> 에서는 <code class="language-plaintext highlighter-rouge">setOnClickListenr</code>를 해제해주고 있는데, 그렇지 않으면 Flow 수집기가 완료된 후에도 계속 동작하여 메모리 누수가 발생한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">Flow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">throttleFirst</span><span class="p">(</span><span class="n">duration</span><span class="p">:</span> <span class="nc">Long</span><span class="p">):</span> <span class="nc">Flow</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">flow</span> <span class="p">{</span>  
    <span class="kd">var</span> <span class="py">lastTime</span> <span class="p">=</span> <span class="mi">0L</span>  
    <span class="nf">collect</span> <span class="p">{</span>  
        <span class="kd">val</span> <span class="py">currentTime</span> <span class="p">=</span> <span class="nc">System</span><span class="p">.</span><span class="nf">currentTimeMillis</span><span class="p">()</span>  
        <span class="k">if</span> <span class="p">(</span><span class="n">currentTime</span> <span class="p">-</span> <span class="n">lastTime</span> <span class="p">&gt;</span> <span class="n">duration</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">lastTime</span> <span class="p">=</span> <span class="n">currentTime</span>  
            <span class="nf">emit</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>  
        <span class="p">}</span>  
    <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>throttleFirst를 작성하는 것은 생각보다 간단하다. 지난 방출되었던 시간 이후로 얼마나 지났는지 확인한 후에 duration보다 크다면 lastTime을 갱신하고, Flow를 방출한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nc">View</span><span class="p">.</span><span class="nf">onThrottleClick</span><span class="p">(</span>  
    <span class="n">scope</span><span class="p">:</span> <span class="nc">CoroutineScope</span><span class="p">,</span>  
    <span class="n">duration</span><span class="p">:</span> <span class="nc">Long</span> <span class="p">=</span> <span class="mi">300L</span><span class="p">,</span>  
    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="nc">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="nf">clickFlow</span><span class="p">()</span>  
        <span class="p">.</span><span class="nf">throttleFirst</span><span class="p">(</span><span class="n">duration</span><span class="p">)</span>  
        <span class="p">.</span><span class="nf">onEach</span> <span class="p">{</span> <span class="nf">onClick</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">}</span>  
        <span class="p">.</span><span class="nf">launchIn</span><span class="p">(</span><span class="n">scope</span><span class="p">)</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>위에서 만든 <code class="language-plaintext highlighter-rouge">clickFlow()</code>와 <code class="language-plaintext highlighter-rouge">throttleFirst()</code>를 활용해 <strong>throttleClick</strong> 동작을 만들 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">()</span>

        <span class="n">binding</span><span class="p">.</span><span class="n">btnLogin</span><span class="p">.</span><span class="nf">onThrottleClick</span><span class="p">(</span><span class="n">lifecycleScope</span><span class="p">)</span> <span class="p">{</span>  
            <span class="c1">// Do Something  </span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 사용할 수 있다.</p>

<h2 id="throttle-click-without-kotlin-flow">Throttle Click without Kotlin Flow</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OnThrottleClickListener</span><span class="p">(</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="py">clickListener</span><span class="p">:</span> <span class="nc">View</span><span class="p">.</span><span class="nc">OnClickListener</span><span class="p">,</span>  
    <span class="k">private</span> <span class="kd">val</span> <span class="py">interval</span><span class="p">:</span> <span class="nc">Long</span> <span class="p">=</span> <span class="mi">300L</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">:</span> <span class="nc">View</span><span class="p">.</span><span class="nc">OnClickListener</span> <span class="p">{</span>  
  
    <span class="k">private</span> <span class="kd">var</span> <span class="py">clicked</span> <span class="p">=</span> <span class="k">false</span>  
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="nc">View</span><span class="p">?)</span> <span class="p">{</span>  
        <span class="k">if</span> <span class="p">(!</span><span class="n">clicked</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">clicked</span> <span class="p">=</span> <span class="k">true</span>  
            <span class="n">v</span><span class="o">?.</span><span class="nf">run</span> <span class="p">{</span>  
                <span class="nf">postDelayed</span><span class="p">(</span>  
                    <span class="p">{</span> <span class="n">clicked</span> <span class="p">=</span> <span class="k">false</span> <span class="p">},</span>  
                    <span class="n">interval</span><span class="p">,</span>  
                <span class="p">)</span>  
                <span class="n">clickListener</span><span class="p">.</span><span class="nf">onClick</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>  
            <span class="p">}</span>  
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>  
            <span class="c1">// 생략 가능</span>
            <span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="s">"로그"</span><span class="p">,</span> <span class="s">"OnThrottleClickListener_onClick: miss!!"</span><span class="p">)</span>  
        <span class="p">}</span>  
    <span class="p">}</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>View.OnClickListener 타입의 클래스인 <code class="language-plaintext highlighter-rouge">OnThrottleClickListener</code> 를 작성했다. 또한 프로퍼티로 View.OnClickListener 타입의 <code class="language-plaintext highlighter-rouge">clickListener</code>를 받는다.</p>

<p>View.OnClickListener를 구현하기 때문에 <code class="language-plaintext highlighter-rouge">onClick()</code>을 오버라이드 해야하는데, 이 메서드는 클릭이 될 때 동작하는 메서드이고, 이 내부에서 clickListener의 onClick을 동작시킨다.</p>

<p>이때 throttle을 구현하기 위해서 <code class="language-plaintext highlighter-rouge">postDelayed</code>를 사용했다. postDelayed는 <strong>일정 시간 이후에 실행시킬 동작</strong>을 할 수 있는데, 위 코드를 보면 interval 시간 이후에 clicked 값을 false로 변경하고 있다.</p>

<p>즉, 최초에 clicked가 false로 설정되어 있기 때문에 clicked를 true로 바꾼 후 clickListener.onClick(v)이 실행되고, interval 시간 이후에 clicked를 false로 바꾸기 때문에
interval 시간이 지나 clicked가 false로 바뀌기 전까지는 클릭 처리가 되지 않는 것이다.</p>

<p>이를 눈으로 확인하기 위해 else 블록에 Log를 찍어 보았다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nc">View</span><span class="p">.</span><span class="nf">onThrottleClick</span><span class="p">(</span>  
    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="nc">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="py">listener</span> <span class="p">=</span> <span class="nc">View</span><span class="p">.</span><span class="nc">OnClickListener</span> <span class="p">{</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>  
    <span class="nf">setOnClickListener</span><span class="p">(</span><span class="nc">OnThrottleClickListener</span><span class="p">(</span><span class="n">listener</span><span class="p">))</span>  
<span class="p">}</span>  
  
<span class="k">fun</span> <span class="nc">View</span><span class="p">.</span><span class="nf">onThrottleClick</span><span class="p">(</span>  
    <span class="n">interval</span><span class="p">:</span> <span class="nc">Long</span><span class="p">,</span>  
    <span class="n">onClick</span><span class="p">:</span> <span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="nc">View</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">,</span>  
<span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="py">listener</span> <span class="p">=</span> <span class="nc">View</span><span class="p">.</span><span class="nc">OnClickListener</span> <span class="p">{</span> <span class="nf">onClick</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="p">}</span>  
    <span class="nf">setOnClickListener</span><span class="p">(</span><span class="nc">OnThrottleClickListener</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="n">interval</span><span class="p">))</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>위에서 작성한 OnThrottleClickListener를 사용한 코드이다.</p>

<p>View의 확장함수로 만들었으며, View의 setOnClickListener에 앞서 만든 OnThrottleClickListener를 등록한다. (OnThrottleClickListener가 View.OnClickListener를 구현했기 때문에 가능하다)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">binding</span><span class="p">.</span><span class="n">btnLogin</span><span class="p">.</span><span class="nf">onThrottleClick</span> <span class="p">{</span>   
    <span class="c1">// Do Something  </span>
<span class="p">}</span>

<span class="n">binding</span><span class="p">.</span><span class="n">btnLogin</span><span class="p">.</span><span class="nf">onThrottleClick</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>  
    <span class="c1">// Do Something  </span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 활용 가능하다.</p>

<h2 id="bindingadapter에서-사용하기">BindingAdapter에서 사용하기</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@BindingAdapter</span><span class="p">(</span><span class="s">"onThrottleClick"</span><span class="p">,</span> <span class="s">"clickInterval"</span><span class="p">,</span> <span class="n">requireAll</span> <span class="p">=</span> <span class="k">false</span><span class="p">)</span>  
<span class="k">fun</span> <span class="nf">applyThrottleClick</span><span class="p">(</span><span class="n">view</span><span class="p">:</span> <span class="nc">View</span><span class="p">,</span> <span class="n">listener</span><span class="p">:</span> <span class="nc">View</span><span class="p">.</span><span class="nc">OnClickListener</span><span class="p">,</span> <span class="n">interval</span><span class="p">:</span> <span class="nc">Long</span><span class="p">?</span> <span class="p">=</span> <span class="mi">300L</span><span class="p">)</span> <span class="p">{</span>  
    <span class="kd">val</span> <span class="py">throttleListener</span> <span class="p">=</span> <span class="n">interval</span><span class="o">?.</span><span class="nf">let</span> <span class="p">{</span> <span class="n">time</span> <span class="p">-&gt;</span>  
        <span class="nc">OnThrottleClickListener</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="n">time</span><span class="p">)</span>  
    <span class="p">}</span> <span class="o">?:</span> <span class="nc">OnThrottleClickListener</span><span class="p">(</span><span class="n">listener</span><span class="p">)</span>  
    <span class="n">view</span><span class="p">.</span><span class="nf">setOnClickListener</span><span class="p">(</span><span class="n">throttleListener</span><span class="p">)</span>  
<span class="p">}</span>
</code></pre></div></div>

<p>간단하게 위와 같이 작성할 수 있다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;com.google.android.material.button.MaterialButton</span>  
    <span class="na">android:id=</span><span class="s">"@+id/btn_signup"</span>
    <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>  
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
    <span class="na">app:onThrottleClick=</span><span class="s">"@{() -&gt; viewmodel.onNextButtonClick()}"</span>
    <span class="na">app:clickInterval=</span><span class="s">"@{3000}"</span>
    <span class="na">tools:text=</span><span class="s">"다음"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>위와 같이 활용할 수 있으며, <code class="language-plaintext highlighter-rouge">app:clickInterval</code>은 생략할 수 있다.</p>

<hr />

<h4 id="참고">참고</h4>

<ul>
  <li>https://proandroiddev.com/throttling-in-rxjava-2-d640ea5f7bf1</li>
  <li>https://blog.yena.io/studynote/2019/12/26/Android-Kotlin-ClickListener.html</li>
  <li>https://m1nzi.tistory.com/2</li>
  <li>chatGPT</li>
</ul>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="flow" /><category term="throttle" /><category term="xml" /><summary type="html"><![CDATA[Throttle 이란?]]></summary></entry><entry><title type="html">Android RecyclerView 클릭 이벤트 처리는 어디서 해야할까</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2022/10/02/android-recyclerview-click.html" rel="alternate" type="text/html" title="Android RecyclerView 클릭 이벤트 처리는 어디서 해야할까" /><published>2022-10-02T00:00:00+00:00</published><updated>2022-10-02T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2022/10/02/android-recyclerview-click</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2022/10/02/android-recyclerview-click.html"><![CDATA[<h2>⭐</h2>

<hr />

<p>리사이클러뷰를 사용할 때 클릭 이벤트를 어디서 어떻게 처리하는 것이 좋을 지 알아보자</p>

<h2 id="간단한-예제-만들기">간단한 예제 만들기</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/193441850-be05e31d-36aa-4ca9-af09-5b44cacb5cce.gif" width="33%" /></p>

<p>메뉴를 선택하고 주문하기 버튼을 누르면 토스트 메시지로 주문 내용을 띄워주는 간단한 예제를 만들어보았다.</p>

<p>간단한 예제이기 때문에 다음 내용들은 크게 고려하지 않았다. 실제 프로젝트를 진행할 때에는 분명 신경써야 하는 부분들이다.</p>

<ul>
  <li>string 리소스 추출</li>
  <li>체크박스를 체크한 후 목록을 스크롤 한 후 돌아왔을 때 초기화 되는 상황 -&gt; ViewHolder 가 재활용 되는 상황</li>
  <li>패키지 구분</li>
  <li>못생긴 UI</li>
  <li>아래에 작성한 코드들은 <code class="language-plaintext highlighter-rouge">package</code>, <code class="language-plaintext highlighter-rouge">import</code> 등을 제외하고 작성함 - <a href="https://github.com/mangbaam/MySampleApps/tree/master/recyclerviewclickbetter">저장소</a>에서 전체 코드 확인</li>
  <li>등등</li>
</ul>

<h3 id="뷰바인딩-활성화--buildgradleapp-">뷰바인딩 활성화 ( build.gradle(:app) )</h3>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span> <span class="o">{</span>
    <span class="c1">// ...</span>

    <span class="n">buildFeatures</span> <span class="o">{</span>
        <span class="n">viewBinding</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="noactionbar-로-변경-themexml">NoActionBar 로 변경 (theme.xml)</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;resources</span> <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">"Theme.RecyclerViewClickBetter"</span> <span class="na">parent=</span><span class="s">"Theme.MaterialComponents.DayNight.NoActionBar"</span><span class="nt">&gt;</span>
        // ...
    <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/resources&gt;</span>
</code></pre></div></div>

<h3 id="아이템-뷰-item_orderxml">아이템 뷰 (item_order.xml)</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/193442135-90988d8d-0fe3-464c-9d9c-936209c3c9a2.png" alt="image" /></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;androidx.cardview.widget.CardView</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
    <span class="na">android:layout_marginVertical=</span><span class="s">"4dp"</span>
    <span class="na">app:cardElevation=</span><span class="s">"8dp"</span>
    <span class="na">app:cardCornerRadius=</span><span class="s">"16dp"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:padding=</span><span class="s">"16dp"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;TextView</span>
            <span class="na">android:id=</span><span class="s">"@+id/tv_table_number"</span>
            <span class="na">style=</span><span class="s">"@style/TextAppearance.AppCompat.Body1"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:textStyle=</span><span class="s">"bold"</span>
            <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"parent"</span>
            <span class="na">tools:text=</span><span class="s">"1 번 테이블"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;CheckBox</span>
            <span class="na">android:id=</span><span class="s">"@+id/cb_gimbob"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"김밥"</span>
            <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
            <span class="na">app:layout_constraintTop_toBottomOf=</span><span class="s">"@id/tv_table_number"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;CheckBox</span>
            <span class="na">android:id=</span><span class="s">"@+id/cb_ramen"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"라면"</span>
            <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
            <span class="na">app:layout_constraintTop_toBottomOf=</span><span class="s">"@id/cb_gimbob"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;androidx.constraintlayout.widget.Barrier</span>
            <span class="na">android:id=</span><span class="s">"@+id/barrier"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
            <span class="na">android:orientation=</span><span class="s">"vertical"</span>
            <span class="na">app:barrierDirection=</span><span class="s">"end"</span>
            <span class="na">app:barrierMargin=</span><span class="s">"30dp"</span>
            <span class="na">app:constraint_referenced_ids=</span><span class="s">"cb_gimbob,cb_ramen"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;CheckBox</span>
            <span class="na">android:id=</span><span class="s">"@+id/cb_dduckbokki"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"떡볶이"</span>
            <span class="na">app:layout_constraintStart_toEndOf=</span><span class="s">"@id/barrier"</span>
            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"@id/cb_gimbob"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;CheckBox</span>
            <span class="na">android:id=</span><span class="s">"@+id/cb_cutlet"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:text=</span><span class="s">"돈까스"</span>
            <span class="na">app:layout_constraintStart_toEndOf=</span><span class="s">"@id/barrier"</span>
            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"@id/cb_ramen"</span> <span class="nt">/&gt;</span>

        <span class="nt">&lt;Button</span>
            <span class="na">android:id=</span><span class="s">"@+id/btn_order"</span>
            <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">app:layout_constraintBottom_toBottomOf=</span><span class="s">"parent"</span>
            <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">"parent"</span>
            <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"parent"</span>
            <span class="na">android:text=</span><span class="s">"주문하기"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
<span class="nt">&lt;/androidx.cardview.widget.CardView&gt;</span>
</code></pre></div></div>

<ul>
  <li>CardView 사용</li>
  <li>ConstraintLayout - Barrier 사용</li>
</ul>

<h3 id="메인-뷰-작성-activity_mainxml">메인 뷰 작성 (activity_main.xml)</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/193442470-623abcbb-4903-4895-8885-23632afb6de4.png" alt="image" /></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">tools:context=</span><span class="s">".MainActivity"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;com.google.android.material.appbar.AppBarLayout</span>
        <span class="na">android:id=</span><span class="s">"@+id/appbar"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"parent"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;androidx.appcompat.widget.Toolbar</span>
            <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">app:title=</span><span class="s">"맹뱀 분식집"</span>
            <span class="na">app:titleTextAppearance=</span><span class="s">"@style/TextAppearance.AppCompat.Title"</span>
            <span class="na">app:titleTextColor=</span><span class="s">"@color/white"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/com.google.android.material.appbar.AppBarLayout&gt;</span>

    <span class="nt">&lt;androidx.recyclerview.widget.RecyclerView</span>
        <span class="na">android:id=</span><span class="s">"@+id/rv_table"</span>
        <span class="na">android:layout_width=</span><span class="s">"0dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"0dp"</span>
        <span class="na">app:layout_constraintBottom_toBottomOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintTop_toBottomOf=</span><span class="s">"@id/appbar"</span>
        <span class="na">tools:listitem=</span><span class="s">"@layout/item_order"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
</code></pre></div></div>

<ul>
  <li>Custom 앱 바 사용</li>
  <li>RecyclerView 에 <code class="language-plaintext highlighter-rouge">tools:listitem="@layout/item_order"</code> 속성을 주면 위에서 작성한 <code class="language-plaintext highlighter-rouge">item_order.xml</code> 을 미리보기로 볼 수 있다</li>
</ul>

<h3 id="주문-모델-orderkt">주문 모델 (Order.kt)</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Order</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">tableNumber</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">gimbob</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">ramen</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">dduckbokki</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">cutlet</span><span class="p">:</span> <span class="nc">Boolean</span> <span class="p">=</span> <span class="k">false</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">valid</span> <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">gimbob</span> <span class="p">||</span> <span class="n">ramen</span> <span class="p">||</span> <span class="n">dduckbokki</span> <span class="p">||</span> <span class="n">cutlet</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">valid</code> 는 4개의 메뉴가 모두 선택되지 않은 경우 false 값을 가지는 <code class="language-plaintext highlighter-rouge">getter</code> 이다</li>
</ul>

<h2 id="mainactivitykt-작성">MainActivity.kt 작성</h2>

<hr />

<p>RecyclerView 에서 아이템을 클릭하게 되면 어댑터를 통해서 해당 이벤트를 처리하게 된다.</p>

<p>이전에는 <code class="language-plaintext highlighter-rouge">interface</code> 를 사용해서 콜백 형태로 넘겨주는 방식을 많이 사용했지만 코틀린으로 넘어오면서 고차함수를 통해 넘겨주는 방식으로 변화했다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">orderAdapter</span> <span class="p">=</span> <span class="nc">OrderAdapter</span> <span class="p">{</span> <span class="n">order</span> <span class="p">-&gt;</span>
    <span class="k">if</span> <span class="p">(!</span><span class="n">order</span><span class="p">.</span><span class="n">valid</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s">"${order.tableNumber} 번 테이블 : 주문된 음식이 없습니다"</span><span class="p">,</span> <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span><span class="p">).</span><span class="nf">show</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">orderInfo</span> <span class="p">=</span> <span class="nf">getOrderInfo</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>

        <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">orderInfo</span><span class="p">,</span> <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span><span class="p">).</span><span class="nf">show</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(<code class="language-plaintext highlighter-rouge">OrderAdapter</code> 는 밑에 작성했습니다)</p>

<p>고차함수를 통해 넘어온 <code class="language-plaintext highlighter-rouge">order</code> 를 통해 어떤 메뉴가 선택되어 있는지 판별하고 토스트 메시지를 통해 띄우는 로직을 가진다.</p>

<h3 id="전체-코드">전체 코드</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">binding</span><span class="p">:</span> <span class="nc">ActivityMainBinding</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="n">binding</span> <span class="p">=</span> <span class="nc">ActivityMainBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="k">this</span><span class="p">))</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="n">binding</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>

        <span class="kd">val</span> <span class="py">tables</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">{</span> <span class="nc">Order</span><span class="p">(</span><span class="n">it</span> <span class="p">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">}</span>

        <span class="kd">val</span> <span class="py">orderAdapter</span> <span class="p">=</span> <span class="nc">OrderAdapter</span> <span class="p">{</span> <span class="n">order</span> <span class="p">-&gt;</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">order</span><span class="p">.</span><span class="n">valid</span><span class="p">)</span> <span class="p">{</span>
                <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s">"${order.tableNumber} 번 테이블 : 주문된 음식이 없습니다"</span><span class="p">,</span> <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span><span class="p">).</span><span class="nf">show</span><span class="p">()</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">orderInfo</span> <span class="p">=</span> <span class="nf">getOrderInfo</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>

                <span class="nc">Toast</span><span class="p">.</span><span class="nf">makeText</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">orderInfo</span><span class="p">,</span> <span class="nc">Toast</span><span class="p">.</span><span class="nc">LENGTH_SHORT</span><span class="p">).</span><span class="nf">show</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="n">binding</span><span class="p">.</span><span class="n">rvTable</span><span class="p">.</span><span class="nf">apply</span> <span class="p">{</span>
            <span class="n">layoutManager</span> <span class="p">=</span> <span class="nc">LinearLayoutManager</span><span class="p">(</span>
                <span class="k">this</span><span class="nd">@MainActivity</span><span class="p">,</span>
                <span class="nc">LinearLayoutManager</span><span class="p">.</span><span class="nc">VERTICAL</span><span class="p">,</span>
                <span class="k">false</span>
            <span class="p">)</span>
            <span class="n">adapter</span> <span class="p">=</span> <span class="n">orderAdapter</span><span class="p">.</span><span class="nf">also</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">items</span> <span class="p">=</span> <span class="n">tables</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">fun</span> <span class="nf">getOrderInfo</span><span class="p">(</span><span class="n">order</span><span class="p">:</span> <span class="nc">Order</span><span class="p">):</span> <span class="nc">String</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">orderInfo</span> <span class="p">=</span> <span class="nc">StringBuilder</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"${order.tableNumber} 번 테이블 : "</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">gimbob</span><span class="p">)</span> <span class="n">orderInfo</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"김밥 "</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">ramen</span><span class="p">)</span> <span class="n">orderInfo</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"라면 "</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">dduckbokki</span><span class="p">)</span> <span class="n">orderInfo</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"떡볶이 "</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="n">cutlet</span><span class="p">)</span> <span class="n">orderInfo</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"돈까스 "</span><span class="p">)</span>
        <span class="n">orderInfo</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"주문되었습니다"</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">orderInfo</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="orderadapter-작성">OrderAdapter 작성</h2>

<hr />

<h3 id="일반적인-방식">일반적인 방식</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderAdapter</span><span class="p">(</span><span class="kd">val</span> <span class="py">orderMenu</span><span class="p">:</span> <span class="p">(</span><span class="nc">Order</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">:</span>
    <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">Adapter</span><span class="p">&lt;</span><span class="nc">OrderAdapter</span><span class="p">.</span><span class="nc">OrderViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="py">items</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Order</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="nf">notifyDataSetChanged</span><span class="p">()</span>
        <span class="p">}</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">OrderViewHolder</span><span class="p">(</span>
        <span class="k">private</span> <span class="kd">val</span> <span class="py">view</span><span class="p">:</span> <span class="nc">ItemOrderBinding</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">fun</span> <span class="nf">bind</span><span class="p">(</span><span class="n">order</span><span class="p">:</span> <span class="nc">Order</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// 뷰에 바인딩 처리 ...</span>

            <span class="n">view</span><span class="p">.</span><span class="n">btnOrder</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">newOrder</span> <span class="p">=</span> <span class="nc">Order</span><span class="p">(</span> <span class="cm">/* ... */</span> <span class="p">)</span> <span class="c1">// 현재 주문 상태</span>
                <span class="nf">orderMenu</span><span class="p">(</span><span class="n">newOrder</span><span class="p">)</span> <span class="c1">// 고차함수 사용한 콜백</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// ...</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindViewHolder</span><span class="p">(</span><span class="n">holder</span><span class="p">:</span> <span class="nc">OrderViewHolder</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">item</span> <span class="p">=</span> <span class="n">items</span><span class="p">[</span><span class="n">position</span><span class="p">]</span>
        <span class="n">holder</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">OrderAdpater</code> 에서는 <code class="language-plaintext highlighter-rouge">orderMenu</code> 라고 하는 고차함수를 가지고 있다</li>
  <li><code class="language-plaintext highlighter-rouge">ViewHolder</code> 의 <code class="language-plaintext highlighter-rouge">bind()</code> 메서드에서 <code class="language-plaintext highlighter-rouge">setOnClickListner</code> 를 달아서 클릭 이벤트를 처리한다</li>
  <li><code class="language-plaintext highlighter-rouge">onBindViewHolder()</code> 에서 <code class="language-plaintext highlighter-rouge">ViewHolder.bind()</code> 메서드를 실행한다</li>
</ul>

<p>위 방식은 일반적으로 많이 사용되는 패턴이다. <code class="language-plaintext highlighter-rouge">onBindingViewHolder</code> 에서 아이템 위치와 데이터를 얻어서 <code class="language-plaintext highlighter-rouge">ViewHolder</code>로 넘겨주기 쉽기 때문에 다루기 쉽고 직관적이다.</p>

<p>하지만 이런 방식은 성능에 최적화 된 방법은 아닐 수 있다.</p>

<p>RecyclerView 에서 <code class="language-plaintext highlighter-rouge">onBindViewHolder()</code> 는 <code class="language-plaintext highlighter-rouge">ViewHolder</code> 에 아이템이 바인딩 될 때마다 호출되고, <code class="language-plaintext highlighter-rouge">setOnClickListener</code> 역시 매번 트리거 될 것이다.</p>

<h4 id="orderadapterkt-전체-코드">OrderAdapter.kt (전체 코드)</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderAdapter</span><span class="p">(</span><span class="kd">val</span> <span class="py">orderMenu</span><span class="p">:</span> <span class="p">(</span><span class="nc">Order</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">:</span>
    <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">Adapter</span><span class="p">&lt;</span><span class="nc">OrderAdapter</span><span class="p">.</span><span class="nc">OrderViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="py">items</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Order</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="nf">notifyDataSetChanged</span><span class="p">()</span>
        <span class="p">}</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">OrderViewHolder</span><span class="p">(</span>
        <span class="k">private</span> <span class="kd">val</span> <span class="py">view</span><span class="p">:</span> <span class="nc">ItemOrderBinding</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">fun</span> <span class="nf">bind</span><span class="p">(</span><span class="n">order</span><span class="p">:</span> <span class="nc">Order</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">view</span><span class="p">.</span><span class="n">tvTableNumber</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"${order.tableNumber} 번 테이블"</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbGimbob</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">gimbob</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbRamen</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">ramen</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbDduckbokki</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">dduckbokki</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbCutlet</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">cutlet</span>

            <span class="n">view</span><span class="p">.</span><span class="n">btnOrder</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
                <span class="kd">val</span> <span class="py">newOrder</span> <span class="p">=</span> <span class="nc">Order</span><span class="p">(</span>
                    <span class="n">order</span><span class="p">.</span><span class="n">tableNumber</span><span class="p">,</span>
                    <span class="n">view</span><span class="p">.</span><span class="n">cbGimbob</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                    <span class="n">view</span><span class="p">.</span><span class="n">cbRamen</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                    <span class="n">view</span><span class="p">.</span><span class="n">cbDduckbokki</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                    <span class="n">view</span><span class="p">.</span><span class="n">cbCutlet</span><span class="p">.</span><span class="n">isChecked</span>
                <span class="p">)</span>
                <span class="nf">orderMenu</span><span class="p">(</span><span class="n">newOrder</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateViewHolder</span><span class="p">(</span><span class="n">parent</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">,</span> <span class="n">viewType</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">OrderViewHolder</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">view</span> <span class="p">=</span> <span class="nc">ItemOrderBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">context</span><span class="p">),</span> <span class="n">parent</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">OrderViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindViewHolder</span><span class="p">(</span><span class="n">holder</span><span class="p">:</span> <span class="nc">OrderViewHolder</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">item</span> <span class="p">=</span> <span class="n">items</span><span class="p">[</span><span class="n">position</span><span class="p">]</span>
        <span class="n">holder</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getItemCount</span><span class="p">()</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">size</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="개선된-방식">개선된 방식</h3>

<ul>
  <li>바인딩 될 때마다 <code class="language-plaintext highlighter-rouge">setOnClickListener</code> 를 동작시키지 않고 <code class="language-plaintext highlighter-rouge">ViewHolder</code> 가 만들어 질 때에 <code class="language-plaintext highlighter-rouge">setOnClickListener</code> 를 부착한다</li>
  <li>아이템 위치는 어떻게 얻어올까? -&gt; <strong><code class="language-plaintext highlighter-rouge">adapterPosition</code> 을 통해 가능하다</strong></li>
  <li>아이템이 클릭되면 <code class="language-plaintext highlighter-rouge">onBindViewHolder</code> 에서는 <code class="language-plaintext highlighter-rouge">ViewHolder</code> 의 고차함수로 클릭된 위치를 받아 이벤트 처리</li>
  <li><code class="language-plaintext highlighter-rouge">MainActivity</code> 의 코드는 변경이 없다 -&gt; Adapter 의 고차함수로 이벤트를 넘겨주는 방식은 동일하다</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/44221447/193444288-e11bed23-47c1-4e3d-99ca-fbb91f5ba730.png" alt="image" /></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderAdapter</span><span class="p">(</span><span class="kd">val</span> <span class="py">orderMenu</span><span class="p">:</span> <span class="p">(</span><span class="nc">Order</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">:</span>
    <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">Adapter</span><span class="p">&lt;</span><span class="nc">OrderAdapter</span><span class="p">.</span><span class="nc">OrderViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="py">items</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Order</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="nf">notifyDataSetChanged</span><span class="p">()</span>
        <span class="p">}</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">OrderViewHolder</span><span class="p">(</span>
        <span class="k">private</span> <span class="kd">val</span> <span class="py">view</span><span class="p">:</span> <span class="nc">ItemOrderBinding</span><span class="p">,</span>
        <span class="n">onItemClicked</span><span class="p">:</span> <span class="p">(</span><span class="nc">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span> <span class="c1">// 클릭된 위치를 넘기기 위한 고차함수</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>

        <span class="nf">init</span> <span class="p">{</span>
            <span class="n">view</span><span class="p">.</span><span class="n">btnOrder</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
                <span class="nf">onItemClicked</span><span class="p">(</span><span class="n">adapterPosition</span><span class="p">)</span> <span class="c1">// 클릭된 위치 넘겨주기</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">fun</span> <span class="nf">bind</span><span class="p">(</span><span class="n">order</span><span class="p">:</span> <span class="nc">Order</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 뷰에 바인딩 처리 로직만 가짐</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateViewHolder</span><span class="p">(</span><span class="n">parent</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">,</span> <span class="n">viewType</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">OrderViewHolder</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">view</span> <span class="p">=</span> <span class="nc">ItemOrderBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">context</span><span class="p">),</span> <span class="n">parent</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">OrderViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span> <span class="c1">// 클릭된 아이템 위치</span>
            <span class="kd">val</span> <span class="py">order</span> <span class="p">=</span> <span class="n">items</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
            <span class="kd">val</span> <span class="py">newOrder</span> <span class="p">=</span> <span class="nc">Order</span><span class="p">(</span> <span class="cm">/* ... */</span> <span class="p">)</span> <span class="c1">// 현재 주문 상태</span>
            <span class="nf">orderMenu</span><span class="p">(</span><span class="n">newOrder</span><span class="p">)</span> <span class="c1">// 고차함수 사용한 콜백</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="개선된-orderadapterkt-전체-코드">개선된 OrderAdapter.kt (전체 코드)</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderAdapter</span><span class="p">(</span><span class="kd">val</span> <span class="py">orderMenu</span><span class="p">:</span> <span class="p">(</span><span class="nc">Order</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span><span class="p">)</span> <span class="p">:</span>
    <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">Adapter</span><span class="p">&lt;</span><span class="nc">OrderAdapter</span><span class="p">.</span><span class="nc">OrderViewHolder</span><span class="p">&gt;()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="py">items</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Order</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>
        <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="nf">notifyDataSetChanged</span><span class="p">()</span>
        <span class="p">}</span>

    <span class="k">inner</span> <span class="kd">class</span> <span class="nc">OrderViewHolder</span><span class="p">(</span>
        <span class="k">private</span> <span class="kd">val</span> <span class="py">view</span><span class="p">:</span> <span class="nc">ItemOrderBinding</span><span class="p">,</span>
        <span class="n">onItemClicked</span><span class="p">:</span> <span class="p">(</span><span class="nc">Int</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nc">Unit</span>
    <span class="p">)</span> <span class="p">:</span> <span class="nc">RecyclerView</span><span class="p">.</span><span class="nc">ViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>

        <span class="nf">init</span> <span class="p">{</span>
            <span class="n">view</span><span class="p">.</span><span class="n">btnOrder</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
                <span class="nf">onItemClicked</span><span class="p">(</span><span class="n">adapterPosition</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">fun</span> <span class="nf">bind</span><span class="p">(</span><span class="n">order</span><span class="p">:</span> <span class="nc">Order</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">view</span><span class="p">.</span><span class="n">tvTableNumber</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"${order.tableNumber} 번 테이블"</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbGimbob</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">gimbob</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbRamen</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">ramen</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbDduckbokki</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">dduckbokki</span>
            <span class="n">view</span><span class="p">.</span><span class="n">cbCutlet</span><span class="p">.</span><span class="n">isChecked</span> <span class="p">=</span> <span class="n">order</span><span class="p">.</span><span class="n">cutlet</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateViewHolder</span><span class="p">(</span><span class="n">parent</span><span class="p">:</span> <span class="nc">ViewGroup</span><span class="p">,</span> <span class="n">viewType</span><span class="p">:</span> <span class="nc">Int</span><span class="p">):</span> <span class="nc">OrderViewHolder</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">view</span> <span class="p">=</span> <span class="nc">ItemOrderBinding</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">LayoutInflater</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">context</span><span class="p">),</span> <span class="n">parent</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">OrderViewHolder</span><span class="p">(</span><span class="n">view</span><span class="p">)</span> <span class="p">{</span> <span class="n">index</span> <span class="p">-&gt;</span>
            <span class="kd">val</span> <span class="py">order</span> <span class="p">=</span> <span class="n">items</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
            <span class="kd">val</span> <span class="py">newOrder</span> <span class="p">=</span> <span class="nc">Order</span><span class="p">(</span>
                <span class="n">order</span><span class="p">.</span><span class="n">tableNumber</span><span class="p">,</span>
                <span class="n">view</span><span class="p">.</span><span class="n">cbGimbob</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                <span class="n">view</span><span class="p">.</span><span class="n">cbRamen</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                <span class="n">view</span><span class="p">.</span><span class="n">cbDduckbokki</span><span class="p">.</span><span class="n">isChecked</span><span class="p">,</span>
                <span class="n">view</span><span class="p">.</span><span class="n">cbCutlet</span><span class="p">.</span><span class="n">isChecked</span>
            <span class="p">)</span>
            <span class="nf">orderMenu</span><span class="p">(</span><span class="n">newOrder</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onBindViewHolder</span><span class="p">(</span><span class="n">holder</span><span class="p">:</span> <span class="nc">OrderViewHolder</span><span class="p">,</span> <span class="n">position</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">item</span> <span class="p">=</span> <span class="n">items</span><span class="p">[</span><span class="n">position</span><span class="p">]</span>
        <span class="n">holder</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">getItemCount</span><span class="p">()</span> <span class="p">=</span> <span class="n">items</span><span class="p">.</span><span class="n">size</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="setonclicklistener-호출-횟수-비교">setOnClickListener 호출 횟수 비교</h2>

<h3 id="bind-함수-내부에서-호출"><strong>bind 함수</strong> 내부에서 호출</h3>

<iframe name="normal" width="100%" height="500px" src="https://user-images.githubusercontent.com/44221447/193464209-7a141f3f-e77a-46e5-9c86-1c2a22f5793e.mp4" allowfullscreen=""></iframe>

<p><img src="https://user-images.githubusercontent.com/44221447/193464318-cb56337c-6fa4-4eff-9906-f7b62ad1ff72.png" alt="image" /></p>

<blockquote>
  <p>총 100 회 호출</p>
</blockquote>

<h3 id="viewholder---init-블록-내부에서-호출"><strong>ViewHolder - init 블록</strong> 내부에서 호출</h3>

<iframe name="Better" width="100%" height="500px" src="https://user-images.githubusercontent.com/44221447/193464137-c87cf080-3c35-4d44-b35f-e9592b472c0d.mp4" allowfullscreen=""></iframe>

<p><img src="https://user-images.githubusercontent.com/44221447/193464357-f566152f-51ea-4fe6-bd1b-d9fa262ff242.png" alt="image" /></p>

<blockquote>
  <p>총 10 회 호출</p>
</blockquote>

<h2 id="결론">결론</h2>

<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">onBindViewHolder()</code> 에서 호출한 <code class="language-plaintext highlighter-rouge">bind()</code> 내부에서 <code class="language-plaintext highlighter-rouge">setOnClickListener</code> 가 존재한다면 뷰홀더가 재사용 될 때마다 트리거 된다</li>
  <li><code class="language-plaintext highlighter-rouge">ViewHolder</code> 가 생성될 때 한 번만 <code class="language-plaintext highlighter-rouge">setOnClickListener</code> 를 달면 위의 문제가 해결된다</li>
  <li><code class="language-plaintext highlighter-rouge">ViewHolder</code>에서 현재 몇 번째 아이템이 선택되고 있는지 알고싶다면 <code class="language-plaintext highlighter-rouge">adapterPosition</code> 을 사용하면 된다</li>
</ul>

<hr />

<h2 id="전체-코드-저장소">전체 코드 (저장소)</h2>

<p><a href="https://github.com/mangbaam/MySampleApps/tree/master/recyclerviewclickbetter">https://github.com/mangbaam/MySampleApps/tree/master/recyclerviewclickbetter</a></p>

<h2 id="참고한-글">참고한 글</h2>

<p><a href="https://hamurcuabi.medium.com/recyclerview-item-click-in-a-better-way-c69d9c074ddf">https://hamurcuabi.medium.com/recyclerview-item-click-in-a-better-way-c69d9c074ddf</a></p>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="recyclerview" /><summary type="html"><![CDATA[⭐]]></summary></entry><entry><title type="html">Kotlin Array, List, Data Class destructuring and ComponentN max count</title><link href="https://mangbaam.github.io//jekyll-theme-yat/kotlin/2022/09/24/kotlin-destructuring.html" rel="alternate" type="text/html" title="Kotlin Array, List, Data Class destructuring and ComponentN max count" /><published>2022-09-24T00:00:00+00:00</published><updated>2022-09-24T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/kotlin/2022/09/24/kotlin-destructuring</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/kotlin/2022/09/24/kotlin-destructuring.html"><![CDATA[<h2 id="destructuring-구조-분해">Destructuring (구조 분해)</h2>

<p><a href="https://kotlinlang.org/docs/destructuring-declarations.html">공식 문서</a></p>

<p>코틀린에서 <code class="language-plaintext highlighter-rouge">리스트</code>나 <code class="language-plaintext highlighter-rouge">배열</code>, <code class="language-plaintext highlighter-rouge">Data Class</code> 등의 값을 각각 변수에 담고 싶을 때 구조 분해를 사용할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">val</span> <span class="py">li</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">n1</span><span class="p">,</span> <span class="py">n2</span><span class="p">,</span> <span class="py">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">li</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"$n1, $n2, $n3"</span><span class="p">)</span> <span class="c1">// 1, 2, 3</span>
    
    <span class="kd">val</span> <span class="py">arr</span> <span class="p">=</span> <span class="nf">charArrayOf</span><span class="p">(</span><span class="sc">'a'</span><span class="p">,</span> <span class="sc">'b'</span><span class="p">,</span> <span class="sc">'c'</span><span class="p">)</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">c1</span><span class="p">,</span> <span class="py">c2</span><span class="p">,</span> <span class="py">c3</span><span class="p">)</span> <span class="p">=</span> <span class="n">arr</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"$c1, $c2, $c3"</span><span class="p">)</span> <span class="c1">// a, b, c</span>
    
    <span class="kd">data class</span> <span class="nc">DoubleClass</span><span class="p">(</span><span class="kd">val</span> <span class="py">d1</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="kd">val</span> <span class="py">d2</span><span class="p">:</span> <span class="nc">Double</span><span class="p">,</span> <span class="kd">val</span> <span class="py">d3</span><span class="p">:</span> <span class="nc">Double</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">dc</span> <span class="p">=</span> <span class="nc">DoubleClass</span><span class="p">(</span><span class="mf">3.2</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mf">5.43</span><span class="p">)</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">d1</span><span class="p">,</span> <span class="py">d2</span><span class="p">,</span> <span class="py">d3</span><span class="p">)</span> <span class="p">=</span> <span class="n">dc</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"$d1, $d2, $d3"</span><span class="p">)</span> <span class="c1">// 3.2, 1.5, 5.43</span>
<span class="p">}</span>
</code></pre></div></div>

<p>파이썬을 사용해 본 사람이 있다면 <code class="language-plaintext highlighter-rouge">unpack</code> 과 비슷한 개념이라고 생각하면 될 것 같다. (파이썬과 다르게 코틀린에서는 괄호로 감싸야 함)</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">val</span> <span class="py">fruitPrice</span> <span class="p">=</span> <span class="nf">mapOf</span><span class="p">(</span><span class="s">"melon"</span> <span class="n">to</span> <span class="mi">10000</span><span class="p">,</span> <span class="s">"banana"</span> <span class="n">to</span> <span class="mi">3000</span><span class="p">,</span> <span class="s">"tomato"</span> <span class="n">to</span> <span class="mi">1000</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">((</span><span class="n">fruit</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span> <span class="k">in</span> <span class="n">fruitPrice</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"$fruit 가격은 $price 원"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="cm">/*
    melon 가격은 10000 원
    banana 가격은 3000 원
    tomato 가격은 1000 원
    */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 for 문으로 접근할 수도 있다. 코틀린에서 <code class="language-plaintext highlighter-rouge">Map</code> 은 각각의 <strong>Key-Value</strong> 셋을 <code class="language-plaintext highlighter-rouge">Pair</code> 로 관리한다.</p>

<p>이 말은 즉, <code class="language-plaintext highlighter-rouge">Pair</code> 도 구조 분해가 가능하고, 비슷한 타입인 <code class="language-plaintext highlighter-rouge">Triple</code> 역시 구조 분해가 가능하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">val</span> <span class="py">science</span> <span class="p">=</span> <span class="nc">Pair</span><span class="p">(</span><span class="s">"science"</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="kd">val</span> <span class="py">pe</span> <span class="p">=</span> <span class="nc">Triple</span><span class="p">(</span><span class="s">"pe"</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">80</span><span class="p">)</span>
    
    <span class="kd">val</span> <span class="p">(</span><span class="py">subject1</span><span class="p">,</span> <span class="py">score</span><span class="p">)</span> <span class="p">=</span> <span class="n">science</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">subject2</span><span class="p">,</span> <span class="py">testScore</span><span class="p">,</span> <span class="py">activityScore</span><span class="p">)</span> <span class="p">=</span> <span class="n">pe</span>
    
    <span class="nf">println</span><span class="p">(</span><span class="s">"$subject1 점수는 $score 점"</span><span class="p">)</span> <span class="c1">// science 점수는 100 점</span>
    <span class="nf">println</span><span class="p">(</span><span class="s">"$subject2 시험 점수는 $testScore, 활동 점수는 $activityScore 점"</span><span class="p">)</span> <span class="c1">// pe 시험 점수는 100, 활동 점수는 80 점</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">pe</span> <span class="p">=</span> <span class="nc">Triple</span><span class="p">(</span><span class="s">"pe"</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">80</span><span class="p">)</span>
    
    <span class="kd">val</span> <span class="p">(</span><span class="py">subject2</span><span class="p">,</span> <span class="py">_</span><span class="p">,</span> <span class="py">activityScore</span><span class="p">)</span> <span class="p">=</span> <span class="n">pe</span>
    
    <span class="nf">println</span><span class="p">(</span><span class="s">"$subject2 활동 점수는 $activityScore 점"</span><span class="p">)</span> <span class="c1">// pe 활동 점수는 80 점</span>
<span class="p">}</span>
</code></pre></div></div>

<p>사용하지 않을 값은 <code class="language-plaintext highlighter-rouge">_</code> 로 하면 값을 구조분해 하지 않고 넘어간다.</p>

<p>그 외에도 <code class="language-plaintext highlighter-rouge">.map</code> 같은 확장 함수에서도 활용할 수 있다.</p>

<h2 id="구조-분해-최대-개수">구조 분해 최대 개수</h2>

<p>구조 분해도 상황에 따라 무한히 할 수 있는 것은 아니다.</p>

<ul>
  <li>Pair - 2 개</li>
  <li>Triple - 3 개</li>
  <li>List, Array - 5 개</li>
  <li>Data Class - 제한 없음</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Pair</code> 나 <code class="language-plaintext highlighter-rouge">Triple</code> 은 당연한 말이고, <code class="language-plaintext highlighter-rouge">List</code>, <code class="language-plaintext highlighter-rouge">Array</code>, <code class="language-plaintext highlighter-rouge">Data Class</code> 는 다른 개수를 가지고 있다.</p>

<p>내부를 확인해보자</p>

<h2 id="data-class---componentn">Data Class - ComponentN</h2>

<p><code class="language-plaintext highlighter-rouge">Data Class</code> 를 만들어서 <a href="#코틀린-코드를-자바-코드로-decompile-하기">자바 코드로 확인</a>해보자.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">married</span><span class="p">:</span> <span class="nc">Boolean</span>
<span class="p">)</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/44221447/192093490-1818591e-8123-4d7f-ba66-be5c14cf0a9e.png" alt="image" /></p>

<p>디컴파일 결과 다양한 내용이 있지만 표시해 둔 <code class="language-plaintext highlighter-rouge">component1, 2, 3</code> 이 있는 것을 볼 수 있다. 그리고 각각은 멤버 변수가 선언된 순서대로 각각을 반환하는 역할을 한다.</p>

<p>그렇다면 이것을 몇 개 까지 만들 수 있을까?</p>

<p>궁금해서 많은 수의 멤버 변수를 가지는 <code class="language-plaintext highlighter-rouge">Data Class</code> 를 만들어 보았다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093593-ef687f99-12aa-40e5-a21e-59ad2c66c2bb.png" alt="image" /></p>

<p>…</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093597-3d2955ac-0f65-4473-a4b4-65deec8d61d5.png" alt="image" /></p>

<p>총 510 개의 멤버 변수를 가지고 있다. 디컴파일 해보자.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093738-44604350-4b8a-47a5-b651-5c90a8b70a14.png" alt="image" /></p>

<p>…</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093726-b2916979-4d31-4b82-8428-3190bc482876.png" alt="image" /></p>

<p>예상했던대로(?) 선언한 510 개 모두에 대해서 <code class="language-plaintext highlighter-rouge">componentN()</code> 메서드가 생긴다. 그리고 좀 더 알아본 결과 시스템이 허용하는 한 무제한 생길 수 있다.</p>

<p>왜 갑자기 <code class="language-plaintext highlighter-rouge">componentN</code> 이야기를 꺼냈냐면 <code class="language-plaintext highlighter-rouge">componentN 이 바로 구조 분해를 하기 위한 메서드</code>이기 때문이다.</p>

<p>확인해보자.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span>
    <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
    <span class="kd">val</span> <span class="py">married</span><span class="p">:</span> <span class="nc">Boolean</span>
<span class="p">)</span>

<span class="k">fun</span> <span class="nf">personTest</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">me</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"mangbaam"</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
    <span class="kd">val</span> <span class="p">(</span><span class="py">name</span><span class="p">,</span> <span class="py">age</span><span class="p">,</span> <span class="py">married</span><span class="p">)</span> <span class="p">=</span> <span class="n">me</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 코드를 작성하고 디컴파일 해보면 다음과 같이 나온다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093888-f08c9d94-511a-4dcf-bb0c-bd86ad216e83.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">name</code> 과 <code class="language-plaintext highlighter-rouge">age</code> 가 <code class="language-plaintext highlighter-rouge">var1</code>, <code class="language-plaintext highlighter-rouge">var2</code> 로 표현되긴 했지만 <code class="language-plaintext highlighter-rouge">me.component1, 2, 3</code> 을 통해서 값을 할당하는 것을 확인할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">me</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"mangbaam"</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
<span class="n">me</span><span class="p">.</span><span class="nf">component1</span><span class="p">()</span>
<span class="n">me</span><span class="p">.</span><span class="nf">component2</span><span class="p">()</span>
<span class="n">me</span><span class="p">.</span><span class="nf">component3</span><span class="p">()</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">componentN</code> 은 <code class="language-plaintext highlighter-rouge">public</code> 메서드이기 때문에 위와 같이 직접 접근도 가능하다.</p>

<blockquote>
  <p>구조 분해는 componentN() 을 통해서 이루어진다</p>
</blockquote>

<h3 id="보너스-pair와-triple-이-구조-분해가-가능한-이유">(보너스) Pair와 Triple 이 구조 분해가 가능한 이유</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/192094757-13f65468-f4c7-4939-8f9d-869205bfe78b.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/192094786-d4e076f9-e0b4-4f82-b949-b0e0eef12138.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">Pair</code> 와 <code class="language-plaintext highlighter-rouge">Triple</code> 의 구현체는 <code class="language-plaintext highlighter-rouge">Data Class</code> 이다. 그래서 당연하게도 구조 분해가 가능한 것이다.</p>

<h2 id="list-array---componentn">List, Array - ComponentN</h2>

<p><img src="https://user-images.githubusercontent.com/44221447/192093157-406e2870-d7a5-45ba-ab2f-ca0689dba71f.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/192093192-fc0f3fe0-c8b6-41a9-a578-326f037fa185.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">List</code> 와 <code class="language-plaintext highlighter-rouge">Arr</code> 모두 <code class="language-plaintext highlighter-rouge">Data Class</code> 와 마찬가지로 <code class="language-plaintext highlighter-rouge">componentN()</code> 가 있다.</p>

<p>그런데 이상한 점은 <code class="language-plaintext highlighter-rouge">li</code>, <code class="language-plaintext highlighter-rouge">arr</code> 모두 값을 8개나 가지고 있는데 <code class="language-plaintext highlighter-rouge">component</code>는 5개만 존재한다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192094229-38f5f19a-073c-4b0d-bec4-9b8db1fc4c0a.png" alt="image" /></p>

<p>그래서 구조 분해를 시도하니 위에서 확인했던 것과는 다르게 에러가 발생하고 있는 것을 볼 수 있다.</p>

<p>에러 내용을 보면 <code class="language-plaintext highlighter-rouge">component6()</code>, <code class="language-plaintext highlighter-rouge">component7()</code>, <code class="language-plaintext highlighter-rouge">component8()</code> 이 없다는 것 같다.</p>

<h3 id="디컴파일-해보자">디컴파일 해보자</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">li</span> <span class="p">=</span> <span class="nf">listOf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>

<span class="kd">val</span> <span class="p">(</span><span class="py">n1</span><span class="p">,</span> <span class="py">n2</span><span class="p">,</span> <span class="py">n3</span><span class="p">,</span> <span class="py">n4</span><span class="p">,</span> <span class="py">n5</span><span class="p">)</span> <span class="p">=</span> <span class="n">li</span>
</code></pre></div></div>

<p>컴파일 에러가 발생하면 디컴파일을 할 수 없기 때문에 구조 분해 개수를 줄이고 디컴파일을 해보았다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192094372-d21a91ab-764b-488e-84b7-e2044e15e86a.png" alt="image" /></p>

<p>이상한 점이 있다. 분명 <code class="language-plaintext highlighter-rouge">Data Class</code> 를 디컴파일 했을 때는 <code class="language-plaintext highlighter-rouge">componentN()</code> 으로 값을 할당하고 있었는데 <code class="language-plaintext highlighter-rouge">List</code> 를 구조 분해 해보니 <code class="language-plaintext highlighter-rouge">get()</code> 을 통해서 값을 할당하고 있다. 하지만 분명 <code class="language-plaintext highlighter-rouge">component1()</code> 과 같이 접근할 수는 있었다.</p>

<h3 id="사실은-확장함수">사실은 확장함수</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/192094493-0a7863fd-3e9d-48d8-9efe-11e071ff3177.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/192094525-ef35e316-2c8e-4033-ba6f-ba52e1e154da.png" alt="image" /></p>

<p>사실 List 나 Array 는 자체적으로 componentN 메서드를 가지고 있는 것이 아니라 확장 함수로써 가지고 있다.</p>

<p>그리고 그 내용은 <code class="language-plaintext highlighter-rouge">get()</code> 을 통해서 가져오고 있기 때문에 디컴파일 해보면 <code class="language-plaintext highlighter-rouge">get()</code> 으로 나타나고 있던 것이다.</p>

<p>확장 함수가 정의된 곳은 <strong>List</strong> 는 <code class="language-plaintext highlighter-rouge">_Collections.kt</code>, <strong>Array</strong> 는 <code class="language-plaintext highlighter-rouge">_Arrays.kt</code> 이다.</p>

<p><code class="language-plaintext highlighter-rouge">Data Class</code> 와 <code class="language-plaintext highlighter-rouge">List</code>, <code class="language-plaintext highlighter-rouge">Array</code> 가 다르게 작성된 이유는 아마도 <code class="language-plaintext highlighter-rouge">List</code> 와 <code class="language-plaintext highlighter-rouge">Array</code> 는 기존에 자바에서 제공되는 것을 사용하기 때문이고, <code class="language-plaintext highlighter-rouge">Data class</code> 는 코틀린에서 새롭게 설계되었기 때문에 더 유연한 것이 아닌가 생각한다.</p>

<h2 id="componentn-직접-만들기">componentN 직접 만들기</h2>

<p><code class="language-plaintext highlighter-rouge">List</code>와 <code class="language-plaintext highlighter-rouge">Array</code> 에서 기본으로 만들어지는 <code class="language-plaintext highlighter-rouge">componentN</code> 은 1 ~ 5 이지만 더 많은 값을 구조 분해 하고싶은 경우가 있을 것이다.</p>

<p>코틀린 기본 라이브러리에서 1 ~ 5 번을 만든 것처럼 우리도 확장 함수를 사용해서 만들어볼 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">inline</span> <span class="k">operator</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">List</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">component6</span><span class="p">()</span> <span class="p">=</span> <span class="k">this</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="k">operator</span> <span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">List</span><span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;.</span><span class="nf">component7</span><span class="p">()</span> <span class="p">=</span> <span class="k">this</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
</code></pre></div></div>

<p>두 가지 방식으로 만들어 보았다. (<code class="language-plaintext highlighter-rouge">inline</code> 의 유무)</p>

<p>그리고 구조 분해를 해보자.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192095102-40b65b89-76c4-49ec-ae37-5edb37b9e788.png" alt="image" /></p>

<p>에러가 발생하지 않는다. 그럼 구조 분해를 해보자.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192095236-abf072b4-d952-45e8-944d-8a11aefceca9.png" alt="image" /></p>

<p>구조 분해 된 코드에서 var6(원래 코드에서 n6) 와 n7 의 차이를 확인해보자.</p>

<p><code class="language-plaintext highlighter-rouge">var6</code>는 앞선 동작과 같이 <code class="language-plaintext highlighter-rouge">get()</code>을 통해서 값을 가져오지만 <code class="language-plaintext highlighter-rouge">var7</code>는 <code class="language-plaintext highlighter-rouge">component7()</code>을 호출하면서 값을 가져온다.</p>

<p>약간 주제에서 벗어난 이야기일 수 있지만 <code class="language-plaintext highlighter-rouge">inline</code> 키워드를 붙이면 함수를 호출하는 것이 아니라 함수에 정의된 기능을 코드에 직접 삽입하는 방식으로 이루어진다. 참조가 줄어들기 때문에 시스템 리소스 낭비를 줄일 수 있는 경우도 생긴다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/192095286-6db73474-0cdb-4aba-8840-75bdc697cef5.png" alt="image" /></p>

<p>이번에는 똑같이 만드는데 자연스럽게 붙였던 <code class="language-plaintext highlighter-rouge">operator</code> 키워드를 빼고 만들어 보았다.</p>

<p>보이는 것과 같이 컴파일 에러가 뜨면서 <code class="language-plaintext highlighter-rouge">operator</code> 를 붙이라는 힌트를 보여준다.</p>

<p>구조 분해를 위해서는 <code class="language-plaintext highlighter-rouge">operator</code> 키워드가 필요하기 때문이다.</p>

<p>원하는 만큼 추가해서 사용해보자.</p>

<hr />

<h2 id="코틀린-코드를-자바-코드로-decompile-하기">코틀린 코드를 자바 코드로 Decompile 하기</h2>

<ol>
  <li>
    <p>코틀린 코드를 작성하고 [Tools] - [Kotlin] - [Show Kotlin Bytecode] 를 선택한다</p>

    <p><img src="https://user-images.githubusercontent.com/44221447/192093291-176ca852-2d78-4ab0-ae56-fec26ed0429c.png" alt="image" /></p>
  </li>
  <li>
    <p>오른쪽 창에 바이트 코드가 나타난다</p>

    <p><img src="https://user-images.githubusercontent.com/44221447/192093318-8b306119-9796-48e8-b3c7-ef8a4af683f7.png" alt="image" /></p>
  </li>
  <li>
    <p>바이트 코드 창에서 상단에 있는 [Decompile] 버튼을 누른다. 그러면 새 창으로 디컴파일 된 자바 코드가 보인다.</p>

    <p><img src="https://user-images.githubusercontent.com/44221447/192093356-94eb6d93-dea5-4b53-89c1-fa4d4dc37173.png" alt="image" /></p>
  </li>
</ol>]]></content><author><name>mangbaam</name></author><category term="Kotlin" /><category term="kotlin" /><summary type="html"><![CDATA[Destructuring (구조 분해)]]></summary></entry><entry><title type="html">DO NOT USE java.util.Stack</title><link href="https://mangbaam.github.io//jekyll-theme-yat/java/2022/09/07/do-not-use-stack-of-java.html" rel="alternate" type="text/html" title="DO NOT USE java.util.Stack" /><published>2022-09-07T00:00:00+00:00</published><updated>2022-09-07T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/java/2022/09/07/do-not-use-stack-of-java</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/java/2022/09/07/do-not-use-stack-of-java.html"><![CDATA[<h2>⭐</h2>

<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html"><img src="https://user-images.githubusercontent.com/44221447/188686040-51a571bd-0868-4203-b845-26cdf1a1dc48.png" alt="image" /></a></p>

<p>위 내용은 Stack 클래스의 JDoc 내용이다. 공식적으로 이 클래스를 사용하기 보다는 <code class="language-plaintext highlighter-rouge">Deque</code> 사용을 권장하고 있다.</p>

<p>그 이유와 대안에 대해서 알아본다.</p>

<h2 id="stack-은-vector-를-상속한다">Stack 은 Vector 를 상속한다</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/188682512-22066dca-24a3-4ecc-838f-17f636ab0383.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">java.util.Stack</code> 의 구현부를 보면 <code class="language-plaintext highlighter-rouge">Vector</code> 를 상속하고 있는 것을 알 수 있다.</p>

<p>Stack 을 사용하지 않아야 하는 이유는 바로 여기에 있다.</p>

<p>그 중에서도 2 가지 이유로 나뉜다.</p>

<h3 id="1-vector-의-메서드를-사용할-수-있다">1. Vector 의 메서드를 사용할 수 있다</h3>

<p>Stack 에서는 push, pop, peek, empty, search 메서드를 제공한다. 하지만 Stack 은 Vector 를 상속 받았기 때문에 이 5개의 메서드 외에도 Vector 에서 제공되는 여러 메서드들도 사용할 수 있다.</p>

<p>문제는 Stack 은 LIFO 구조를 유지해야 하지만 Vector 의 특성 상 인덱스를 사용해 중간의 값에 접근하거나 심지어는 조작할 수도 있는 상황이 발생한다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188689719-2f3bd29a-1ca0-479c-a15c-0e02a4b692c3.png" alt="image" /></p>

<p>실제로 remove 나 indexOf 와 같은 메서드를 사용해도 ide 에서 전혀 에러 메시지를 표시하지 않는다. (정상적인 코드니까)</p>

<p>애초부터 Stack 은 잘못 설계된 클래스라는 것이다. 왜 Vector 를 상속하게 되었는지는 밑에서 살펴보자.</p>

<h3 id="2-vector-사용-자체를-지양해야-한다">2. Vector 사용 자체를 지양해야 한다</h3>

<p>Stack 을 사용하지 않아야 할 두 번째 이유는 기본적으로 Vector 처럼 동작하기 때문이다. 그리고 Vector 사용을 지양하기 때문이다.</p>

<p>Vector 와 ArrayList 의 차이점을 알고 있는가?</p>

<p>두 컬렉션의 차이는 thread-safe 여부이다. Vector 는 멀티스레드 환경에서 안전하게 사용하기 위해 등장했다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188694000-422240c8-7682-475a-8451-8418ff1edc6d.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/188694538-8c3c096b-63c7-4c4d-ad94-a413eaa0f120.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/188694110-d0e05681-3c31-400b-9102-045a13c689c1.png" alt="image" /></p>

<p>실제로 add, get, remove 등의 메서드를 보면 모두 <code class="language-plaintext highlighter-rouge">synchronized</code> 키워드가 붙어있는 것을 확인할 수 있다.</p>

<p>그러면 멀티스레드 환경에서 Vector 를 사용하면 될까? - 음… 권장하지 않는다.</p>

<p><code class="language-plaintext highlighter-rouge">synchronized</code> 키워드가 붙어 있으면 특정 상황에서 성능을 상당히 저하시킬 위험이 있다.</p>

<p>예를 들어 Vector 를 순차적으로 탐색한다고 했을 때 전체 과정 중 한 번만 locking 을 해도 될 것을 get() 이 호출되는 매 순간 locking 과정이 발생해 필요 없는 오버헤드가 발생하게 된다.</p>

<p>그럼 멀티스레드 환경에서 Vector 대신 어떤 것을 사용해야 할까? - 아래 메서드 중 하나를 사용하면 된다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188697762-6ed13e35-f2fc-4ae7-a78b-df53bcf210a9.png" alt="image" /></p>

<p>위 메서드들은 <code class="language-plaintext highlighter-rouge">Collections</code> 에 포함되어 있는 메서드들이다. 이 <code class="language-plaintext highlighter-rouge">Collections.synchronizedXXX</code> 메서드를 사용하면 thread-safe 한 컬렉션을 만들 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">li</span> <span class="p">=</span> <span class="nc">Collections</span><span class="p">.</span><span class="nf">synchronizedList</span><span class="p">(</span><span class="n">mutableListOf</span><span class="p">&lt;</span><span class="nc">T</span><span class="err">\</span><span class="p">&gt;())</span> <span class="c1">// li : (Mutable)List&lt;String!&gt;!</span>
</code></pre></div></div>

<h2 id="stack-은-왜-vector-를-상속했을까">Stack 은 왜 Vector 를 상속했을까</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/188702519-01a7e028-26d2-4448-83a9-2ed53e07a6cf.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/188702567-f77fb66b-8798-4734-8db8-42767dbd98df.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">Stack</code>과 <code class="language-plaintext highlighter-rouge">Vector</code> 는 Java 의 첫 번째 릴리즈(Java 1.0)에 포함된 것들이다. Java 는 당시에 인터넷 열풍으로 인해 시장에 일찍 출시되었다.</p>

<p>이와 비슷하게 날짜 및 시간과 관련된 클래스의 초기 버전들도 잘 설계되지 않은 채 개발되었다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188701777-2e3250b8-010c-4aa2-bfca-57a32f6d4796.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/44221447/188702356-9e7a9f88-34f4-4e3e-b0d1-f9e6b856c9e5.png" alt="image" /></p>

<p>이후 <a href="https://en.wikipedia.org/wiki/Java_collections_framework">Java Collection 프레임워크</a>에서 Vector 와 Stack 을 대체되었고, 마찬가지로 java.time 프레임워크는 java.util.Date, java.util.Calendar 와 같은 클래스로 대체되었지만 쉽게 없애버리지 못하는 이유는 기존 앱과의 하위 호환성을 위해서이다.</p>

<p>객체지향 프로그래밍에서 특히 더 설계에 주의해야 한다는 것을 잘 보여주는 사례인 것 같다.</p>

<h2 id="stack-대신-어떤-것을-사용해야-할까">Stack 대신 어떤 것을 사용해야 할까</h2>

<hr />

<p>주석에 나와 있듯이 <code class="language-plaintext highlighter-rouge">ArrayDeque</code> 같은 Deque 관련 컬렉션을 사용하면 된다. 물론 Deque 의 특성 상 양쪽 끝에서 접근할 수 있지만 적어도 Stack 클래스와 같은 문제는 없다.</p>

<p>직접 만들어서 사용하는 방법도 좋을 것 같다.</p>

<p>만약 멀티스레드 환경에서 사용해야 한다면 <code class="language-plaintext highlighter-rouge">ConcurrentLinkedDeque</code> 을 사용하면 된다.</p>

<h2 id="출처">출처</h2>

<hr />

<h3 id="thread-safe-method">Thread-safe method</h3>

<p>https://stackoverflow.com/questions/66169482/are-kotlin-mutable-collections-thread-safe</p>

<h3 id="why-stack-extends-vector-in-jdk">Why Stack extends Vector in JDK</h3>

<p>https://stackoverflow.com/questions/37314298/why-stack-extends-vector-in-jdk</p>

<h3 id="자바에서-vector-와-stack-컬렉션이-쓰이지-않는-이유">자바에서 Vector 와 Stack 컬렉션이 쓰이지 않는 이유</h3>

<p>https://aahc.tistory.com/8</p>

<h3 id="java-의-stack-대신-deque">Java 의 Stack 대신 Deque</h3>

<p>https://tecoble.techcourse.co.kr/post/2021-05-10-stack-vs-deque/</p>]]></content><author><name>mangbaam</name></author><category term="Java" /><category term="java" /><category term="kotlin" /><summary type="html"><![CDATA[⭐]]></summary></entry><entry><title type="html">Android BottomNavigationView with Jetpack Navigation</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2022/09/04/android-jetpack-navigation-and-bottom-navigation.html" rel="alternate" type="text/html" title="Android BottomNavigationView with Jetpack Navigation" /><published>2022-09-04T00:00:00+00:00</published><updated>2022-09-04T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2022/09/04/android-jetpack-navigation-and-bottom-navigation</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2022/09/04/android-jetpack-navigation-and-bottom-navigation.html"><![CDATA[<h2>⭐</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/188276445-e4f18957-57d8-4f9d-a24e-6533c8fa36f8.png" width="30%" /></p>

<p>앱에서 하단 네비게이션은 흔히 볼 수 있는 UI 이다. 아마도 가장 익숙한 것이 카카오톡의 하단 메뉴인 것 같다. (물론 카카오톡이 Jetpack Navigation 으로 작성되었다는 말은 아니다)</p>

<p>이번 글에서는 <code class="language-plaintext highlighter-rouge">Jetpack Navigation</code> 을 사용해서 하단 네비게이션을 연동하는 방법에 대해서 설명한다.</p>

<h2 id="jetpack-navigation-이란">Jetpack Navigation 이란</h2>

<hr />

<p><a href="https://developer.android.com/guide/navigation">공식 문서</a></p>

<p>Jetpack Navigation(이하 <em>Navigation</em> 혹은 <em>네비게이션</em>)은 앱의 컨텐츠를 탐색하거나 상호작용을 구현할 때 더욱 쉽고 편하고 안전하게 할 수 있도록 해주는 Jetpack 라이브러리이다. 주로 프래그먼트 간의 이동이나 데이터 전달 등의 기능을 사용할 때 좋다.</p>

<p>개발자에게 아주 편한 기능을 제공하지만 제공되지 않는 기능은 커스텀해서 사용해야 하기 때문에 규모가 큰 앱에서는 잘 사용하지 않는다고도 한다. 물론 기능이 제공되는 부분에 한해 선택적으로 사용할 수도 있겠다.</p>

<p>그래서 FragmentManager 를 통해서 직접 프래그먼트를 다루는 방법을 반드시 알고는 있어야 한다. 이 글에서는 Navigation 에 대해서만 설명한다.</p>

<h2 id="navigation-의-장점">Navigation 의 장점</h2>

<hr />

<ul>
  <li>프래그먼트 트랜젝션 처리</li>
  <li>‘Up’과 ‘Back’ 이벤트를 적절히 처리</li>
  <li>애니메이션, 전환 등의 리소스 제공</li>
  <li>딥 링크 구현 및 처리 가능</li>
  <li>Navigation Drawer나 Bottom Navigation 등의 UI 패턴을 쉽게 연동 가능</li>
  <li><a href="https://developer.android.com/guide/navigation/navigation-pass-data#Safe-args">Safe Args</a> 제공 (안정적으로 데이터를 전달할 수 있는 기능)</li>
  <li>ViewModel 지원</li>
  <li>GUI(<a href="https://developer.android.com/guide/navigation/navigation-getting-started">Navigation Editor</a>)를 통한 쉬운 조작</li>
</ul>

<h2 id="navigation-의-3가지-요소">Navigation 의 3가지 요소</h2>

<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">Navigation Graph</code>(이하 NavGraph)
    <ul>
      <li>Navigation 관련 기능이 모여 있는 XML 파일</li>
      <li>대상(앱 내의 컨텐츠나 화면)간 경로도 이 파일에서 관리됨</li>
      <li>GUI(<a href="https://developer.android.com/guide/navigation/navigation-getting-started">Navigation Editor</a>)로 조작 가능</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">NavHost</code>
    <ul>
      <li>NavGraph 에서 대상(프래그먼트 뷰)을 표시하는 빈 컨테이너</li>
      <li><code class="language-plaintext highlighter-rouge">NavHostFragment</code> 를 사용하는 것을 권장함</li>
      <li>예전에는 <code class="language-plaintext highlighter-rouge">FrameLayout</code> 등으로 사용했음</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">NavController</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">NavHost</code> 에서 앱 탐색을 할 수 있도록 하는 객체</li>
      <li>대상 간 이동하는 경우 <code class="language-plaintext highlighter-rouge">NavController</code> 를 통해 이루어진다</li>
      <li>전환이 이루어지면 <code class="language-plaintext highlighter-rouge">NavHost</code> 에 이동한 프래그먼트를 띄우는 역할</li>
    </ul>
  </li>
</ul>

<h2 id="buildgradle-추가">Build.gradle 추가</h2>

<hr />

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
  <span class="kt">def</span> <span class="n">nav_version</span> <span class="o">=</span> <span class="s2">"2.5.1"</span>

  <span class="c1">// Java language implementation</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-fragment:$nav_version"</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-ui:$nav_version"</span>

  <span class="c1">// Kotlin</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-fragment-ktx:$nav_version"</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-ui-ktx:$nav_version"</span>

  <span class="c1">// Feature module Support</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-dynamic-features-fragment:$nav_version"</span>

  <span class="c1">// Testing Navigation</span>
  <span class="n">androidTestImplementation</span> <span class="s2">"androidx.navigation:navigation-testing:$nav_version"</span>

  <span class="c1">// Jetpack Compose Integration</span>
  <span class="n">implementation</span> <span class="s2">"androidx.navigation:navigation-compose:$nav_version"</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/44221447/188277621-1ab03b35-b563-48f9-936e-2a44a0d3d48c.png" alt="image" /></p>

<p>필요한 것만 사용하면 된다. 특히 자바와 코틀린 중 사용하는 언어만 추가해도 된다.</p>

<h2 id="ui-작성">UI 작성</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/188277753-93ed089c-9dd0-4264-a9d9-b83cd1bdd73b.png" alt="image" /></p>

<p>이런 UI 를 작성해보려고 한다.</p>

<h3 id="menu-추가">Menu 추가</h3>

<p><em>bottom_nav.xml</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;menu</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;item</span>
        <span class="na">android:id=</span><span class="s">"@+id/newsListFragment"</span>
        <span class="na">android:icon=</span><span class="s">"@drawable/ic_news"</span>
        <span class="na">android:title=</span><span class="s">"Top News"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;item</span>
        <span class="na">android:id=</span><span class="s">"@+id/categoriesFragment"</span>
        <span class="na">android:icon=</span><span class="s">"@drawable/ic_category"</span>
        <span class="na">android:title=</span><span class="s">"Categories"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;item</span>
        <span class="na">android:id=</span><span class="s">"@+id/savedFragment"</span>
        <span class="na">android:icon=</span><span class="s">"@drawable/ic_save"</span>
        <span class="na">android:title=</span><span class="s">"Saved"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/menu&gt;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/44221447/188277895-01e3e1b3-a3e2-4a06-92fb-3f8294cce0f2.png" alt="image" /></p>

<p>하단 메뉴에 추가할 메뉴를 res/menu 폴더에 추가한다.</p>

<h3 id="fragment-추가">Fragment 추가</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/188277958-5190c087-2d0b-4a58-936e-2fcf483c3b33.png" alt="image" /></p>

<p><em>categories.xml</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;FrameLayout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:background=</span><span class="s">"#ED9292"</span>
    <span class="na">tools:context=</span><span class="s">".CategoriesFragment"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
        <span class="na">android:textStyle=</span><span class="s">"bold"</span>
        <span class="na">android:textSize=</span><span class="s">"40dp"</span>
        <span class="na">android:gravity=</span><span class="s">"center"</span>
        <span class="na">android:text=</span><span class="s">"Categories"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/FrameLayout&gt;</span>
</code></pre></div></div>

<p>하단 네비게이션에 연결할 3개의 프래그먼트를 만들었다. (CategoryFragment, NewsListFragment, SavedFragment)</p>

<p>xxxFragment.kt 파일에는 자동으로 생성된 코드만 존재하고, 뷰는 배경 색과 글자만 빼고 모두 동일하게 작성했다.</p>

<h3 id="navgraph-추가">NavGraph 추가</h3>

<p><img src="https://user-images.githubusercontent.com/44221447/188278036-870df5ce-fd8d-41a9-bba5-1c31c320a1ff.png" alt="image" /></p>

<p>우측 상단에서 디자인 탭으로 보면 아래와 같이 UI 로 조작할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188278121-f4a932cd-2f95-41d7-9192-a729907be38b.png" alt="image" /></p>

<p>빨갛게 표시해놓은 <code class="language-plaintext highlighter-rouge">+</code> 버튼을 누르면 생성한 프래그먼트나 액티비티를 추가할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188278161-35d5be96-c1f7-441d-94e4-418071dc9c47.png" alt="image" /></p>

<p>앞서 만든 3개의 프래그먼트를 마우스로 클릭하면 다음과 같이 추가가 된다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188278222-a6093052-cb07-47f4-ae5b-fcc6a5dd8fc3.png" alt="image" /></p>

<p>그리고 가장 최초에 NavHost 에 보여줄 프래그먼트는 StartDestination 이라고 부르는데 위에 있는 집모양 버튼을 누르면 지정할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/188278266-5425bab1-ea2b-49f8-a6e0-56a5316c4c48.png" alt="image" /></p>

<p>우측 상단에서 split 탭이나 코드 탭에서 코드를 확인해보면 다음과 같이 추가된 것을 확인할 수 있다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;navigation</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:id=</span><span class="s">"@+id/nav_graph"</span>
    <span class="na">app:startDestination=</span><span class="s">"@id/newsListFragment"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;fragment</span>
        <span class="na">android:id=</span><span class="s">"@+id/categoriesFragment"</span>
        <span class="na">android:name=</span><span class="s">"mangbaam.practice.wanted_preonboarding_android.CategoriesFragment"</span>
        <span class="na">android:label=</span><span class="s">"fragment_categories"</span>
        <span class="na">tools:layout=</span><span class="s">"@layout/fragment_categories"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;fragment</span>
        <span class="na">android:id=</span><span class="s">"@+id/newsListFragment"</span>
        <span class="na">android:name=</span><span class="s">"mangbaam.practice.wanted_preonboarding_android.NewsListFragment"</span>
        <span class="na">android:label=</span><span class="s">"fragment_news_list"</span>
        <span class="na">tools:layout=</span><span class="s">"@layout/fragment_news_list"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;fragment</span>
        <span class="na">android:id=</span><span class="s">"@+id/savedFragment"</span>
        <span class="na">android:name=</span><span class="s">"mangbaam.practice.wanted_preonboarding_android.SavedFragment"</span>
        <span class="na">android:label=</span><span class="s">"fragment_saved"</span>
        <span class="na">tools:layout=</span><span class="s">"@layout/fragment_saved"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/navigation&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">type</code>: 위 코드에서 <code class="language-plaintext highlighter-rouge">fragment</code> 에 해당함</li>
  <li><code class="language-plaintext highlighter-rouge">label</code>: 사용자에게 표시될 수 있는 이름. <code class="language-plaintext highlighter-rouge">setUpWithNavController()</code>로 <code class="language-plaintext highlighter-rouge">Toolbar</code>에 연결하면 UI에 이 값이 표시될 수 있기 때문에 리소스 문자열 사용 권장</li>
  <li><code class="language-plaintext highlighter-rouge">id</code>: 코드에서 대상을 참조할 때 필요한 ID</li>
  <li><code class="language-plaintext highlighter-rouge">layout</code>: 표시할 레이아웃</li>
</ul>

<p>여기서 중요한 것은 <code class="language-plaintext highlighter-rouge">id</code> 와 res/menu 의 메뉴 <code class="language-plaintext highlighter-rouge">id</code> 가 일치해야 한다는 것이다.</p>

<p><a href="#menu-추가">menu 를 추가하는 부분</a>으로 돌아가보면 <code class="language-plaintext highlighter-rouge">id</code> 값이 일치하는 것을 알 수 있다.</p>

<h2 id="navhost와-bottomnavigationview-추가">NavHost와 BottomNavigationView 추가</h2>

<hr />

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;androidx.constraintlayout.widget.ConstraintLayout</span>
    <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">xmlns:app=</span><span class="s">"http://schemas.android.com/apk/res-auto"</span>
    <span class="na">xmlns:tools=</span><span class="s">"http://schemas.android.com/tools"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">tools:context=</span><span class="s">".MainActivity"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;androidx.fragment.app.FragmentContainerView</span>
        <span class="na">android:id=</span><span class="s">"@+id/container"</span>
        <span class="na">android:name=</span><span class="s">"androidx.navigation.fragment.NavHostFragment"</span>
        <span class="na">android:layout_width=</span><span class="s">"0dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"0dp"</span>
        <span class="na">app:defaultNavHost=</span><span class="s">"true"</span>
        <span class="na">app:layout_constraintBottom_toTopOf=</span><span class="s">"@+id/navigation"</span>
        <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintTop_toTopOf=</span><span class="s">"parent"</span>
        <span class="na">app:navGraph=</span><span class="s">"@navigation/nav_graph"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;com.google.android.material.bottomnavigation.BottomNavigationView</span>
        <span class="na">android:id=</span><span class="s">"@+id/navigation"</span>
        <span class="na">android:layout_width=</span><span class="s">"0dp"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">app:layout_constraintBottom_toBottomOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintEnd_toEndOf=</span><span class="s">"parent"</span>
        <span class="na">app:layout_constraintStart_toStartOf=</span><span class="s">"parent"</span>
        <span class="na">app:menu=</span><span class="s">"@menu/bottom_nav"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/44221447/188278411-2c4397b3-d798-4985-8ca2-35e8fcb66ac5.png" width="33%" /> <img src="https://user-images.githubusercontent.com/44221447/188278422-5d1f94cf-1124-4d3a-a0be-1100780f5536.png" width="33%" /></p>

<p>NavHost 에 해당하는 것이 FragmentContainerView 이고, Bottom Navigation이 BottomNavigationView 이다.</p>

<p>NavHost 에서 중요한 속성은 다음과 같다</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">android:name</code> : NavHost 구현 클래스 이름</li>
  <li><code class="language-plaintext highlighter-rouge">defaultNavHost : true</code> : true 일 때 NavHostFragment 가 시스템 뒤로 버튼을 가로채는 등 적절한 동작을 한다. 여러 호스트가 있는 경우 하나만 설정 가능</li>
  <li><code class="language-plaintext highlighter-rouge">navGraph</code> : NavHostFragment 를 NavGraph 와 연결. 위에서 만든 NavGraph 를 연결해주면 된다</li>
</ul>

<p>BottomNavigatinoView 의 중요한 속성은 다음과 같다</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">menu</code> : 하단 네비게이션에 추가할 메뉴를 추가한다</li>
</ul>

<h2 id="navcontroller-로-bottomnavigation-과-연결">NavController 로 BottomNavigation 과 연결</h2>

<hr />

<p><em>MainActivity.kt</em></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
        <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

        <span class="nf">initNavigation</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">fun</span> <span class="nf">initNavigation</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">val</span> <span class="py">navHostFragment</span> <span class="p">=</span> <span class="n">supportFragmentManager</span><span class="p">.</span><span class="nf">findFragmentById</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">container</span><span class="p">)</span> <span class="k">as</span> <span class="nc">NavHostFragment</span>
        <span class="kd">val</span> <span class="py">navController</span> <span class="p">=</span> <span class="n">navHostFragment</span><span class="p">.</span><span class="n">navController</span>
        <span class="n">findViewById</span><span class="p">&lt;</span><span class="nc">BottomNavigationView</span><span class="p">&gt;(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">navigation</span><span class="p">).</span><span class="nf">setupWithNavController</span><span class="p">(</span><span class="n">navController</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>NavHostFragment 를 찾는다</li>
  <li>NavController 를 찾는다</li>
  <li>BottomNavigation 에 NavController 를 연결한다</li>
</ol>

<p>위 과정을 따른다.</p>

<p>참고로 NavController 는 주로 4가지 방법 중 하나로 찾을 수 있다.</p>

<ol>
  <li>NavHostFragment.navController (위에서 사용한 방법)</li>
  <li>Fragment.findNavController()</li>
  <li>View.findNavController()</li>
  <li>Activity.findNavController()</li>
</ol>

<h2 id="결과">결과</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/188280066-ff3463cd-374e-4d1c-903c-f247bbef8f4c.gif" alt="untitled" /></p>

<p>Jetpack Navigation 을 사용하면 뒤로가기 버튼을 눌렀을 때 StartDestination 으로 돌아온다.</p>

<p>StartDestination 에서 뒤로가기 버튼을 한 번 더 눌러야 앱이 종료된다.</p>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="jetpack" /><category term="navigation" /><summary type="html"><![CDATA[⭐]]></summary></entry><entry><title type="html">Android TextView 를 중첩(계층)할 수 없는 이유</title><link href="https://mangbaam.github.io//jekyll-theme-yat/android/2022/08/31/android-xml-view-manager.html" rel="alternate" type="text/html" title="Android TextView 를 중첩(계층)할 수 없는 이유" /><published>2022-08-31T00:00:00+00:00</published><updated>2022-08-31T00:00:00+00:00</updated><id>https://mangbaam.github.io//jekyll-theme-yat/android/2022/08/31/android-xml-view-manager</id><content type="html" xml:base="https://mangbaam.github.io//jekyll-theme-yat/android/2022/08/31/android-xml-view-manager.html"><![CDATA[<h2 id="textview-를-계층-구조로-만들-수-있을까">TextView 를 계층 구조로 만들 수 있을까?</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/187700176-a349d63f-1e50-4564-9a8d-619fee880668.png" alt="image" /></p>

<p>안드로이드 스튜디오에서 새 프로젝트를 만들면 activity_main.xml 파일에 위와 같이 TextView 하나가 생성되어 있다.</p>

<p>자세히 보면 ConstraintLayout 태그 안에 TextView 단일 태그가 있는 형태이다.</p>

<p>그럼 TextView 도 ConstriantLayout 처럼 태그를 열어서 다른 뷰를 넣을 수 없을까?</p>

<p><img src="https://user-images.githubusercontent.com/44221447/187699938-b7dd32b1-7753-43e1-9334-0392fb34cc82.png" alt="image" /></p>

<p>그래서 위 코드와 같이 TextView 를 중첩해서 작성해보았다. 그랬더니 다음 사진과 같이 렌더링 오류가 발생했다.</p>

<p><img src="https://user-images.githubusercontent.com/44221447/187699686-aec3d842-1bc2-41ec-92cf-23d661715277.png" alt="image" /></p>

<p>TextView 는 하위 계층으로 다른 뷰를 추가할 수 없다는 것인데… 왜 그럴지 알아보았다.</p>

<h2 id="view-와-viewgroup">View 와 ViewGroup</h2>

<hr />

<p>ConstraintLayout 과 TextView 는 둘 다 View 이다. View 라고 부르는 것은 실제로 View 라는 클래스를 상속하고 있기 때문이다.</p>

<p>하지만 차이가 있다면 ConstraintLayout 은 View 를 상속하는 ViewGroup 을 상속하고 있고, TextView 는 View 를 직접 상속하고 있다는 점이다.</p>

<p>ConstraintLayout 뿐만 아니라 FrameLayout, LinearLayout, RelativeLayout 등 xxxLayout 으로 이름 지어진 뷰들은 ViewGroup 을 상속하고 있고, 태그를 열어서 다른 뷰들을 포함할 수 있는 특별한 뷰라는 특징이 있다.</p>

<p><a href="https://developer.android.com/guide/topics/ui/declaring-layout?hl=ko"><img src="https://user-images.githubusercontent.com/44221447/187703738-1470bf0d-de3a-47a1-87f2-5812b029da53.png" alt="image" /></a></p>

<p>위 그림은 안드로이드 공식 문서에 있는 그림인데 마치 ViewGroup 이 최상위 계층인 것으로 착각할 수 있는데 저 그림이 상속 관계는 아니고 어떠한 UI 레이아웃의 한 예시이다. ViewGroup 이 View 를 포함할 수 있다는 것 정도로 이해하면 될 듯 하다.</p>

<h2 id="viewparent와-viewmanager">ViewParent와 ViewManager</h2>

<hr />

<p><img src="https://user-images.githubusercontent.com/44221447/187707010-d81ab9b5-b4b9-4a60-9ad6-cf8cc86bf23e.png" alt="image" /></p>

<p>ViewGroup 은 View 를 상속하고 있지만 ViewParent와 ViewManager 인터페이스도 구현하고 있다.</p>

<h3 id="viewparent">ViewParent</h3>

<p>ViewParent 인터페이스는 부모 뷰로서의 책임을 정의한다. 어떠한 자식 뷰가 부모와 상호작용 하기 위해 사용하는 메서드들이 정의되어 있다.</p>

<p>예를 들면 포커즈를 요청하기 위한 메서드나 뷰를 맨 위(Z축)로 올리기 위한 메서드 등이 있다.</p>

<p><a href="https://developer.android.com/reference/android/view/ViewParent">공식 문서</a>에서 자세히 확인할 수 있다.</p>

<h3 id="viewmanager">ViewManager</h3>

<p>ViewManager 는 자식 뷰를 추가하거나 제거할 수 있도록 한다.</p>

<p>총 3개의 메서드가 제공되는데 <code class="language-plaintext highlighter-rouge">addView</code>, <code class="language-plaintext highlighter-rouge">removeView</code>, <code class="language-plaintext highlighter-rouge">updateViewLayout</code> 이다.</p>

<p>ViewManager 를 상속하는 클래스는 ViewGroup 이 유일하다.</p>

<p><a href="https://developer.android.com/reference/android/view/ViewManager">공식 문서</a>에서 자세히 확인할 수 있다.</p>

<h2 id="결론">결론</h2>

<hr />

<p>어떠한 View 가 자식 View 를 가지려면 자식 View 가 배치되고 부모 뷰와 상호작용 해야 하는데 이때 ViewParent 에 정의된 메서드들과 ViewManager 에 정의된 메서드들이 모두 필요하다. 그리고 이 두 인터페이스를 구현하고 있는 유일한 클래스가 ViewGroup 클래스이기 때문에 자식 뷰를 가지기 위해서는 ViewGroup 을 상속하거나 ViewGroup 을 상속하는 다른 클래스를 상속해야 한다.</p>

<p>예를 들어 ScrollView 는 ViewGroup 을 상속하는 FrameLayout 을 상속하고, ViewPager2 는 ViewGroup 을 직접 상속한다.</p>

<p>결국 TextView 는 ViewGroup 을 상속하고 있지 않기 때문에 하위 뷰를 둘 수 없는 것을 알 수 있었고, 커스텀 뷰를 만들 때 하위에 뷰를 두고자 한다면 ViewGroup 을 상속하거나 ViewGroup 을 상속하는 다른 클래스를 상속해서 만들어야 한다는 점도 알 수 있었다.</p>]]></content><author><name>mangbaam</name></author><category term="Android" /><category term="android" /><category term="xml" /><category term="inside" /><summary type="html"><![CDATA[TextView 를 계층 구조로 만들 수 있을까?]]></summary></entry></feed>